//****************************************************************************//
// Verilog models generated by SiliconSmart L-2016.06-SP1-1 build date: Sep 28, 2016 18:12:52. (SMSC-2) //
// Siliconsmart Path: /opt/synopsys/silicon_smart/L-2016.06-SP1-1/linux64/bin/siliconsmart //
// Host Name: unsam.pc, User Name: digital, PID: 18100                       //
// Directory: /home/digital/siliconSmart                                      //
//                                                                            //
// File generated on Thu Jul 13 19:18:08 -03 2017. (SMSC-3)                   //
//****************************************************************************//


`timescale 1ns/1ps

module AN21X1_test_OUT;

  AN21X1 instance0(.A(A), .B(B), .C(C), .OUT(OUT));

  AN21X1_stim_OUT instance1(.A(A), .B(B), .C(C), .OUT(OUT));

endmodule

module AN21X1_stim_OUT(A, B, C, OUT);

  output A;
  reg A;
  output B;
  reg B;
  output C;
  reg C;
  input OUT;

  parameter NUM_INPUT_BITS = 3;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 3;

  parameter NUM_VECTORS = 24;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[1] = {1'b1, 1'b1, 1'b0, 1'b0};
    vectors[2] = {1'b1, 1'b1, 1'b0, 1'b0};
    vectors[3] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[4] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[5] = {1'b1, 1'b1, 1'b0, 1'b0};
    vectors[6] = {1'b1, 1'b1, 1'b0, 1'b0};
    vectors[7] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[8] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[9] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[10] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[11] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[12] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[13] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[14] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[15] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[16] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[17] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[18] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[19] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[20] = {1'b1, 1'b1, 1'b0, 1'b0};
    vectors[21] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[22] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[23] = {1'b1, 1'b1, 1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B, C} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : AN21X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module AND2X1_test_OUT;

  AND2X1 instance0(.A(A), .B(B), .OUT(OUT));

  AND2X1_stim_OUT instance1(.A(A), .B(B), .OUT(OUT));

endmodule

module AND2X1_stim_OUT(A, B, OUT);

  output A;
  reg A;
  output B;
  reg B;
  input OUT;

  parameter NUM_INPUT_BITS = 2;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 2;

  parameter NUM_VECTORS = 16;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1, 1'b0};
    vectors[1] = {1'b1, 1'b1, 1'b1};
    vectors[2] = {1'b1, 1'b1, 1'b1};
    vectors[3] = {1'b0, 1'b1, 1'b0};
    vectors[4] = {1'b1, 1'b0, 1'b0};
    vectors[5] = {1'b1, 1'b1, 1'b1};
    vectors[6] = {1'b1, 1'b1, 1'b1};
    vectors[7] = {1'b1, 1'b0, 1'b0};
    vectors[8] = {1'b0, 1'b0, 1'b0};
    vectors[9] = {1'b1, 1'b0, 1'b0};
    vectors[10] = {1'b1, 1'b0, 1'b0};
    vectors[11] = {1'b0, 1'b0, 1'b0};
    vectors[12] = {1'b0, 1'b0, 1'b0};
    vectors[13] = {1'b0, 1'b1, 1'b0};
    vectors[14] = {1'b0, 1'b1, 1'b0};
    vectors[15] = {1'b0, 1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : AND2X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module AND3X1_test_OUT;

  AND3X1 instance0(.A(A), .B(B), .C(C), .OUT(OUT));

  AND3X1_stim_OUT instance1(.A(A), .B(B), .C(C), .OUT(OUT));

endmodule

module AND3X1_stim_OUT(A, B, C, OUT);

  output A;
  reg A;
  output B;
  reg B;
  output C;
  reg C;
  input OUT;

  parameter NUM_INPUT_BITS = 3;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 3;

  parameter NUM_VECTORS = 24;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1, 1'b1, 1'b0};
    vectors[1] = {1'b1, 1'b1, 1'b1, 1'b1};
    vectors[2] = {1'b1, 1'b1, 1'b1, 1'b1};
    vectors[3] = {1'b0, 1'b1, 1'b1, 1'b0};
    vectors[4] = {1'b1, 1'b0, 1'b1, 1'b0};
    vectors[5] = {1'b1, 1'b1, 1'b1, 1'b1};
    vectors[6] = {1'b1, 1'b1, 1'b1, 1'b1};
    vectors[7] = {1'b1, 1'b0, 1'b1, 1'b0};
    vectors[8] = {1'b1, 1'b1, 1'b0, 1'b0};
    vectors[9] = {1'b1, 1'b1, 1'b1, 1'b1};
    vectors[10] = {1'b1, 1'b1, 1'b1, 1'b1};
    vectors[11] = {1'b1, 1'b1, 1'b0, 1'b0};
    vectors[12] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[13] = {1'b1, 1'b0, 1'b0, 1'b0};
    vectors[14] = {1'b1, 1'b0, 1'b0, 1'b0};
    vectors[15] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[16] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[17] = {1'b0, 1'b1, 1'b0, 1'b0};
    vectors[18] = {1'b0, 1'b1, 1'b0, 1'b0};
    vectors[19] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[20] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[21] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[22] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[23] = {1'b0, 1'b0, 1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B, C} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : AND3X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module AND4X1_test_OUT;

  AND4X1 instance0(.C(C), .D(D), .B(B), .A(A), .OUT(OUT));

  AND4X1_stim_OUT instance1(.C(C), .D(D), .B(B), .A(A), .OUT(OUT));

endmodule

module AND4X1_stim_OUT(C, D, B, A, OUT);

  output C;
  reg C;
  output D;
  reg D;
  output B;
  reg B;
  output A;
  reg A;
  input OUT;

  parameter NUM_INPUT_BITS = 4;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 4;

  parameter NUM_VECTORS = 32;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[1] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[2] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[3] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[4] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[5] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[6] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[7] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[8] = {1'b1, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[9] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[10] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[11] = {1'b1, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[12] = {1'b1, 1'b1, 1'b1, 1'b0, 1'b0};
    vectors[13] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[14] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[15] = {1'b1, 1'b1, 1'b1, 1'b0, 1'b0};
    vectors[16] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[17] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[18] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[19] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[20] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[21] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[22] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[23] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[24] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[25] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[26] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[27] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[28] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[29] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[30] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[31] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B, C, D} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : AND4X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module AND5X1_test_OUT;

  AND5X1 instance0(.C(C), .D(D), .E(E), .B(B), .A(A), .OUT(OUT));

  AND5X1_stim_OUT instance1(.C(C), .D(D), .E(E), .B(B), .A(A), .OUT(OUT));

endmodule

module AND5X1_stim_OUT(C, D, E, B, A, OUT);

  output C;
  reg C;
  output D;
  reg D;
  output E;
  reg E;
  output B;
  reg B;
  output A;
  reg A;
  input OUT;

  parameter NUM_INPUT_BITS = 5;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 5;

  parameter NUM_VECTORS = 40;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[1] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[2] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[3] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[4] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[5] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[6] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[7] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[8] = {1'b1, 1'b1, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[9] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[10] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[11] = {1'b1, 1'b1, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[12] = {1'b1, 1'b1, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[13] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[14] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[15] = {1'b1, 1'b1, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[16] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b0};
    vectors[17] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[18] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[19] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b0};
    vectors[20] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[21] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[22] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[23] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[24] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[25] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[26] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[27] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[28] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[29] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[30] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[31] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[32] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[33] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[34] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[35] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[36] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[37] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[38] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[39] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B, C, D, E} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : AND5X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module AND6X1_test_OUT;

  AND6X1 instance0(.C(C), .D(D), .F(F), .E(E), .B(B), .A(A), .OUT(OUT));

  AND6X1_stim_OUT instance1(.C(C), .D(D), .F(F), .E(E), .B(B), .A(A), .OUT(OUT));

endmodule

module AND6X1_stim_OUT(C, D, F, E, B, A, OUT);

  output C;
  reg C;
  output D;
  reg D;
  output F;
  reg F;
  output E;
  reg E;
  output B;
  reg B;
  output A;
  reg A;
  input OUT;

  parameter NUM_INPUT_BITS = 6;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 6;

  parameter NUM_VECTORS = 48;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[1] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[2] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[3] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[4] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[5] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[6] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[7] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[8] = {1'b1, 1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[9] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[10] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[11] = {1'b1, 1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[12] = {1'b1, 1'b1, 1'b1, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[13] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[14] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[15] = {1'b1, 1'b1, 1'b1, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[16] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[17] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[18] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[19] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[20] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b0};
    vectors[21] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[22] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[23] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b0};
    vectors[24] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[25] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[26] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[27] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[28] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[29] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[30] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[31] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[32] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[33] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[34] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[35] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[36] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[37] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[38] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[39] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[40] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[41] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[42] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[43] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[44] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[45] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[46] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[47] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B, C, D, E, F} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : AND6X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module AO21X1_test_OUT;

  AO21X1 instance0(.B(B), .A(A), .C(C), .OUT(OUT));

  AO21X1_stim_OUT instance1(.B(B), .A(A), .C(C), .OUT(OUT));

endmodule

module AO21X1_stim_OUT(B, A, C, OUT);

  output B;
  reg B;
  output A;
  reg A;
  output C;
  reg C;
  input OUT;

  parameter NUM_INPUT_BITS = 3;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 3;

  parameter NUM_VECTORS = 24;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1, 1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b1, 1'b0, 1'b1};
    vectors[2] = {1'b1, 1'b1, 1'b0, 1'b1};
    vectors[3] = {1'b0, 1'b1, 1'b0, 1'b0};
    vectors[4] = {1'b1, 1'b0, 1'b0, 1'b0};
    vectors[5] = {1'b1, 1'b1, 1'b0, 1'b1};
    vectors[6] = {1'b1, 1'b1, 1'b0, 1'b1};
    vectors[7] = {1'b1, 1'b0, 1'b0, 1'b0};
    vectors[8] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[9] = {1'b0, 1'b0, 1'b1, 1'b1};
    vectors[10] = {1'b0, 1'b0, 1'b1, 1'b1};
    vectors[11] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[12] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[13] = {1'b1, 1'b0, 1'b0, 1'b0};
    vectors[14] = {1'b1, 1'b0, 1'b0, 1'b0};
    vectors[15] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[16] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[17] = {1'b0, 1'b1, 1'b0, 1'b0};
    vectors[18] = {1'b0, 1'b1, 1'b0, 1'b0};
    vectors[19] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[20] = {1'b1, 1'b1, 1'b0, 1'b1};
    vectors[21] = {1'b1, 1'b1, 1'b1, 1'b1};
    vectors[22] = {1'b1, 1'b1, 1'b1, 1'b1};
    vectors[23] = {1'b1, 1'b1, 1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B, C} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : AO21X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module AO222X1_test_OUT;

  AO222X1 instance0(.E(E), .F(F), .D(D), .C(C), .B(B), .A(A), .OUT(OUT));

  AO222X1_stim_OUT instance1(.E(E), .F(F), .D(D), .C(C), .B(B), .A(A), .OUT(OUT));

endmodule

module AO222X1_stim_OUT(E, F, D, C, B, A, OUT);

  output E;
  reg E;
  output F;
  reg F;
  output D;
  reg D;
  output C;
  reg C;
  output B;
  reg B;
  output A;
  reg A;
  input OUT;

  parameter NUM_INPUT_BITS = 6;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 6;

  parameter NUM_VECTORS = 48;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[2] = {1'b1, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[3] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[4] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[5] = {1'b1, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[6] = {1'b1, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[7] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[8] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[9] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[10] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[11] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[12] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[13] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[14] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[15] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[16] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[17] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[18] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[19] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[20] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[21] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[22] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[23] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[24] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[25] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[26] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[27] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[28] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[29] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[30] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[31] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[32] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[33] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[34] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[35] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[36] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[37] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[38] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[39] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[40] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[41] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[42] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[43] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[44] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[45] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[46] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[47] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B, C, D, E, F} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : AO222X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module AO22X1_test_OUT;

  AO22X1 instance0(.C(C), .D(D), .B(B), .A(A), .OUT(OUT));

  AO22X1_stim_OUT instance1(.C(C), .D(D), .B(B), .A(A), .OUT(OUT));

endmodule

module AO22X1_stim_OUT(C, D, B, A, OUT);

  output C;
  reg C;
  output D;
  reg D;
  output B;
  reg B;
  output A;
  reg A;
  input OUT;

  parameter NUM_INPUT_BITS = 4;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 4;

  parameter NUM_VECTORS = 32;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[2] = {1'b1, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[3] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[4] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[5] = {1'b1, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[6] = {1'b1, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[7] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[8] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[9] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[10] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[11] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[12] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[13] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[14] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[15] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[16] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[17] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[18] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[19] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[20] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[21] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[22] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[23] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[24] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[25] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[26] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[27] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[28] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[29] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[30] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[31] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B, C, D} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : AO22X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module AO31X1_test_OUT;

  AO31X1 instance0(.A(A), .B(B), .C(C), .D(D), .OUT(OUT));

  AO31X1_stim_OUT instance1(.A(A), .B(B), .C(C), .D(D), .OUT(OUT));

endmodule

module AO31X1_stim_OUT(A, B, C, D, OUT);

  output A;
  reg A;
  output B;
  reg B;
  output C;
  reg C;
  output D;
  reg D;
  input OUT;

  parameter NUM_INPUT_BITS = 4;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 4;

  parameter NUM_VECTORS = 32;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1, 1'b1, 1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[2] = {1'b1, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[3] = {1'b0, 1'b1, 1'b1, 1'b0, 1'b0};
    vectors[4] = {1'b1, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[5] = {1'b1, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[6] = {1'b1, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[7] = {1'b1, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[8] = {1'b1, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[9] = {1'b1, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[10] = {1'b1, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[11] = {1'b1, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[12] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[13] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[14] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[15] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[16] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[17] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[18] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[19] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[20] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[21] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[22] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[23] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[24] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[25] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[26] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[27] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[28] = {1'b1, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[29] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[30] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[31] = {1'b1, 1'b1, 1'b1, 1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B, C, D} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : AO31X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module AO32X1_test_OUT;

  AO32X1 instance0(.A(A), .B(B), .C(C), .E(E), .D(D), .OUT(OUT));

  AO32X1_stim_OUT instance1(.A(A), .B(B), .C(C), .E(E), .D(D), .OUT(OUT));

endmodule

module AO32X1_stim_OUT(A, B, C, E, D, OUT);

  output A;
  reg A;
  output B;
  reg B;
  output C;
  reg C;
  output E;
  reg E;
  output D;
  reg D;
  input OUT;

  parameter NUM_INPUT_BITS = 5;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 5;

  parameter NUM_VECTORS = 40;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b1, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[2] = {1'b1, 1'b1, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[3] = {1'b0, 1'b1, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[4] = {1'b1, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[5] = {1'b1, 1'b1, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[6] = {1'b1, 1'b1, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[7] = {1'b1, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[8] = {1'b1, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[9] = {1'b1, 1'b1, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[10] = {1'b1, 1'b1, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[11] = {1'b1, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[12] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[13] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[14] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[15] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[16] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[17] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[18] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[19] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[20] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[21] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[22] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[23] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[24] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[25] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[26] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[27] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[28] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[29] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[30] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[31] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[32] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[33] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[34] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[35] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[36] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[37] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[38] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[39] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B, C, D, E} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : AO32X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module BUF1X4_test_OUT;

  BUF1X4 instance0(.IN(IN), .OUT(OUT));

  BUF1X4_stim_OUT instance1(.IN(IN), .OUT(OUT));

endmodule

module BUF1X4_stim_OUT(IN, OUT);

  output IN;
  reg IN;
  input OUT;

  parameter NUM_INPUT_BITS = 1;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 1;

  parameter NUM_VECTORS = 4;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b1};
    vectors[2] = {1'b1, 1'b1};
    vectors[3] = {1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {IN} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : BUF1X4:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module BUF2X8_test_OUT;

  BUF2X8 instance0(.IN(IN), .OUT(OUT));

  BUF2X8_stim_OUT instance1(.IN(IN), .OUT(OUT));

endmodule

module BUF2X8_stim_OUT(IN, OUT);

  output IN;
  reg IN;
  input OUT;

  parameter NUM_INPUT_BITS = 1;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 1;

  parameter NUM_VECTORS = 4;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b1};
    vectors[2] = {1'b1, 1'b1};
    vectors[3] = {1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {IN} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : BUF2X8:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module BUX1_test_OUT;

  BUX1 instance0(.IN(IN), .OUT(OUT));

  BUX1_stim_OUT instance1(.IN(IN), .OUT(OUT));

endmodule

module BUX1_stim_OUT(IN, OUT);

  output IN;
  reg IN;
  input OUT;

  parameter NUM_INPUT_BITS = 1;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 1;

  parameter NUM_VECTORS = 4;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b1};
    vectors[2] = {1'b1, 1'b1};
    vectors[3] = {1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {IN} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : BUX1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module BUX2_test_OUT;

  BUX2 instance0(.IN(IN), .OUT(OUT));

  BUX2_stim_OUT instance1(.IN(IN), .OUT(OUT));

endmodule

module BUX2_stim_OUT(IN, OUT);

  output IN;
  reg IN;
  input OUT;

  parameter NUM_INPUT_BITS = 1;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 1;

  parameter NUM_VECTORS = 4;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b1};
    vectors[2] = {1'b1, 1'b1};
    vectors[3] = {1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {IN} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : BUX2:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module BUX3_test_OUT;

  BUX3 instance0(.IN(IN), .OUT(OUT));

  BUX3_stim_OUT instance1(.IN(IN), .OUT(OUT));

endmodule

module BUX3_stim_OUT(IN, OUT);

  output IN;
  reg IN;
  input OUT;

  parameter NUM_INPUT_BITS = 1;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 1;

  parameter NUM_VECTORS = 4;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b1};
    vectors[2] = {1'b1, 1'b1};
    vectors[3] = {1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {IN} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : BUX3:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module BUX4_test_OUT;

  BUX4 instance0(.IN(IN), .OUT(OUT));

  BUX4_stim_OUT instance1(.IN(IN), .OUT(OUT));

endmodule

module BUX4_stim_OUT(IN, OUT);

  output IN;
  reg IN;
  input OUT;

  parameter NUM_INPUT_BITS = 1;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 1;

  parameter NUM_VECTORS = 4;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b1};
    vectors[2] = {1'b1, 1'b1};
    vectors[3] = {1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {IN} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : BUX4:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module BUX6_test_OUT;

  BUX6 instance0(.IN(IN), .OUT(OUT));

  BUX6_stim_OUT instance1(.IN(IN), .OUT(OUT));

endmodule

module BUX6_stim_OUT(IN, OUT);

  output IN;
  reg IN;
  input OUT;

  parameter NUM_INPUT_BITS = 1;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 1;

  parameter NUM_VECTORS = 4;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b1};
    vectors[2] = {1'b1, 1'b1};
    vectors[3] = {1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {IN} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : BUX6:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module BUX8_test_Z;

  BUX8 instance0(.IN(IN), .Z(Z));

  BUX8_stim_Z instance1(.IN(IN), .Z(Z));

endmodule

module BUX8_stim_Z(IN, Z);

  output IN;
  reg IN;
  input Z;

  parameter NUM_INPUT_BITS = 1;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_Z_LOCATION = 1;

  parameter NUM_VECTORS = 4;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b1};
    vectors[2] = {1'b1, 1'b1};
    vectors[3] = {1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {IN} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_Z_LOCATION] !== Z && ivector[OUTPUT_Z_LOCATION] !== 1'bx)
        $display("testbench ERROR : BUX8:Z output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_Z_LOCATION], Z);
    end

  end

endmodule

module DFFX1_test_Q_QN;

  DFFX1 instance0(.D(D), .ICLK(ICLK), .QN(QN), .Q(Q));

  DFFX1_stim_Q_QN instance1(.D(D), .ICLK(ICLK), .QN(QN), .Q(Q));

endmodule

module DFFX1_stim_Q_QN(D, ICLK, QN, Q);

  output D;
  reg D;
  output ICLK;
  reg ICLK;
  input Q;
  input QN;

  parameter NUM_INPUT_BITS = 2;
  parameter NUM_OUTPUT_BITS = 2;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_Q_LOCATION = 2;
  parameter OUTPUT_QN_LOCATION = 3;

  parameter NUM_VECTORS = 39;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1, 1'bx, 1'bx};
    vectors[1] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[2] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[3] = {1'b1, 1'b1, 1'b0, 1'b1};
    vectors[4] = {1'b1, 1'b0, 1'b1, 1'b0};
    vectors[5] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[6] = {1'b0, 1'b1, 1'bx, 1'bx};
    vectors[7] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[8] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[9] = {1'b1, 1'b1, 1'b0, 1'b1};
    vectors[10] = {1'b1, 1'b0, 1'b1, 1'b0};
    vectors[11] = {1'b0, 1'b1, 1'bx, 1'bx};
    vectors[12] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[13] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[14] = {1'b1, 1'b1, 1'b0, 1'b1};
    vectors[15] = {1'b1, 1'b0, 1'b1, 1'b0};
    vectors[16] = {1'b1, 1'b1, 1'bx, 1'bx};
    vectors[17] = {1'b1, 1'b0, 1'b1, 1'b0};
    vectors[18] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[19] = {1'b0, 1'b1, 1'b1, 1'b0};
    vectors[20] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[21] = {1'b1, 1'b1, 1'bx, 1'bx};
    vectors[22] = {1'b1, 1'b0, 1'b1, 1'b0};
    vectors[23] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[24] = {1'b0, 1'b1, 1'b1, 1'b0};
    vectors[25] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[26] = {1'b0, 1'b1, 1'bx, 1'bx};
    vectors[27] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[28] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[29] = {1'b1, 1'b1, 1'bx, 1'bx};
    vectors[30] = {1'b1, 1'b0, 1'b1, 1'b0};
    vectors[31] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[32] = {1'b0, 1'b1, 1'bx, 1'bx};
    vectors[33] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[34] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[35] = {1'b0, 1'b1, 1'bx, 1'bx};
    vectors[36] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[37] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[38] = {1'b0, 1'b0, 1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {D, ICLK} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_Q_LOCATION] !== Q && ivector[OUTPUT_Q_LOCATION] !== 1'bx)
        $display("testbench ERROR : DFFX1:Q output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_Q_LOCATION], Q);
      if(ivector[OUTPUT_QN_LOCATION] !== QN && ivector[OUTPUT_QN_LOCATION] !== 1'bx)
        $display("testbench ERROR : DFFX1:QN output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_QN_LOCATION], QN);
    end

  end

endmodule

module DFRQX1_test_Q;

  DFRQX1 instance0(.ICLK(ICLK), .D(D), .Q(Q));

  DFRQX1_stim_Q instance1(.ICLK(ICLK), .D(D), .Q(Q));

endmodule

module DFRQX1_stim_Q(ICLK, D, Q);

  output ICLK;
  reg ICLK;
  output D;
  reg D;
  input Q;

  parameter NUM_INPUT_BITS = 2;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_Q_LOCATION = 2;

  parameter NUM_VECTORS = 31;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0, 1'bx};
    vectors[1] = {1'b0, 1'b1, 1'b0};
    vectors[2] = {1'b1, 1'b1, 1'b0};
    vectors[3] = {1'b1, 1'b0, 1'b0};
    vectors[4] = {1'b1, 1'b1, 1'b1};
    vectors[5] = {1'b1, 1'b0, 1'b1};
    vectors[6] = {1'b0, 1'b0, 1'bx};
    vectors[7] = {1'b0, 1'b1, 1'b0};
    vectors[8] = {1'b1, 1'b1, 1'b0};
    vectors[9] = {1'b1, 1'b0, 1'b0};
    vectors[10] = {1'b1, 1'b1, 1'b1};
    vectors[11] = {1'b1, 1'b0, 1'bx};
    vectors[12] = {1'b1, 1'b1, 1'b1};
    vectors[13] = {1'b0, 1'b1, 1'b1};
    vectors[14] = {1'b0, 1'b0, 1'b1};
    vectors[15] = {1'b0, 1'b1, 1'b0};
    vectors[16] = {1'b0, 1'b0, 1'bx};
    vectors[17] = {1'b0, 1'b1, 1'b0};
    vectors[18] = {1'b0, 1'b0, 1'b0};
    vectors[19] = {1'b1, 1'b0, 1'b0};
    vectors[20] = {1'b1, 1'b0, 1'bx};
    vectors[21] = {1'b1, 1'b1, 1'b1};
    vectors[22] = {1'b1, 1'b0, 1'b1};
    vectors[23] = {1'b0, 1'b0, 1'b1};
    vectors[24] = {1'b0, 1'b0, 1'bx};
    vectors[25] = {1'b0, 1'b1, 1'b0};
    vectors[26] = {1'b0, 1'b0, 1'b0};
    vectors[27] = {1'b0, 1'b1, 1'b0};
    vectors[28] = {1'b0, 1'b0, 1'bx};
    vectors[29] = {1'b0, 1'b1, 1'b0};
    vectors[30] = {1'b0, 1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {D, ICLK} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_Q_LOCATION] !== Q && ivector[OUTPUT_Q_LOCATION] !== 1'bx)
        $display("testbench ERROR : DFRQX1:Q output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_Q_LOCATION], Q);
    end

  end

endmodule

module DFRRSX1_test_Q_QN;

  DFRRSX1 instance0(.ICLK(ICLK), .D(D), .RN(RN), .SN(SN), .Q(Q), .QN(QN));

  DFRRSX1_stim_Q_QN instance1(.ICLK(ICLK), .D(D), .RN(RN), .SN(SN), .Q(Q), .QN(QN));

endmodule

module DFRRSX1_stim_Q_QN(ICLK, D, RN, SN, Q, QN);

  output ICLK;
  reg ICLK;
  output D;
  reg D;
  output RN;
  reg RN;
  output SN;
  reg SN;
  input Q;
  input QN;

  parameter NUM_INPUT_BITS = 4;
  parameter NUM_OUTPUT_BITS = 2;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_Q_LOCATION = 4;
  parameter OUTPUT_QN_LOCATION = 5;

  parameter NUM_VECTORS = 57;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b1, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[1] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[2] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[3] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[4] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[5] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[6] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[7] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[8] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[9] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[10] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[11] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[12] = {1'b1, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[13] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[14] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[15] = {1'b1, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[16] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[17] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[18] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[19] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[20] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[21] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[22] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[23] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[24] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[25] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[26] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[27] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[28] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[29] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[30] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[31] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[32] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[33] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[34] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[35] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[36] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[37] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[38] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[39] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[40] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[41] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[42] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[43] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[44] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[45] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[46] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[47] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[48] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[49] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[50] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[51] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[52] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[53] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[54] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[55] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[56] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {D, ICLK, RN, SN} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_Q_LOCATION] !== Q && ivector[OUTPUT_Q_LOCATION] !== 1'bx)
        $display("testbench ERROR : DFRRSX1:Q output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_Q_LOCATION], Q);
      if(ivector[OUTPUT_QN_LOCATION] !== QN && ivector[OUTPUT_QN_LOCATION] !== 1'bx)
        $display("testbench ERROR : DFRRSX1:QN output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_QN_LOCATION], QN);
    end

  end

endmodule

module DFRRX1_test_Q_QN;

  DFRRX1 instance0(.ICLK(ICLK), .D(D), .RN(RN), .QN(QN), .Q(Q));

  DFRRX1_stim_Q_QN instance1(.ICLK(ICLK), .D(D), .RN(RN), .QN(QN), .Q(Q));

endmodule

module DFRRX1_stim_Q_QN(ICLK, D, RN, QN, Q);

  output ICLK;
  reg ICLK;
  output D;
  reg D;
  output RN;
  reg RN;
  input Q;
  input QN;

  parameter NUM_INPUT_BITS = 3;
  parameter NUM_OUTPUT_BITS = 2;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_Q_LOCATION = 3;
  parameter OUTPUT_QN_LOCATION = 4;

  parameter NUM_VECTORS = 49;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[1] = {1'b1, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[2] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[3] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[4] = {1'b1, 1'b0, 1'b1, 1'bx, 1'bx};
    vectors[5] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[6] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[7] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[8] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[9] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[10] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[11] = {1'b1, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[12] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[13] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[14] = {1'b1, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[15] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[16] = {1'b1, 1'b0, 1'b1, 1'bx, 1'bx};
    vectors[17] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[18] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[19] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[20] = {1'b0, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[21] = {1'b1, 1'b0, 1'b1, 1'bx, 1'bx};
    vectors[22] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[23] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[24] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[25] = {1'b0, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[26] = {1'b1, 1'b0, 1'b1, 1'bx, 1'bx};
    vectors[27] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[28] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[29] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[30] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[31] = {1'b1, 1'b0, 1'b1, 1'bx, 1'bx};
    vectors[32] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[33] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[34] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[35] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[36] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[37] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[38] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[39] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[40] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[41] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[42] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[43] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[44] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[45] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[46] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[47] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[48] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {D, ICLK, RN} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_Q_LOCATION] !== Q && ivector[OUTPUT_Q_LOCATION] !== 1'bx)
        $display("testbench ERROR : DFRRX1:Q output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_Q_LOCATION], Q);
      if(ivector[OUTPUT_QN_LOCATION] !== QN && ivector[OUTPUT_QN_LOCATION] !== 1'bx)
        $display("testbench ERROR : DFRRX1:QN output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_QN_LOCATION], QN);
    end

  end

endmodule

module DFRX1_test_Q_QN;

  DFRX1 instance0(.D(D), .ICLK(ICLK), .Q(Q), .QN(QN));

  DFRX1_stim_Q_QN instance1(.D(D), .ICLK(ICLK), .Q(Q), .QN(QN));

endmodule

module DFRX1_stim_Q_QN(D, ICLK, Q, QN);

  output D;
  reg D;
  output ICLK;
  reg ICLK;
  input Q;
  input QN;

  parameter NUM_INPUT_BITS = 2;
  parameter NUM_OUTPUT_BITS = 2;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_Q_LOCATION = 2;
  parameter OUTPUT_QN_LOCATION = 3;

  parameter NUM_VECTORS = 41;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0, 1'bx, 1'bx};
    vectors[1] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[2] = {1'b1, 1'b1, 1'b0, 1'b1};
    vectors[3] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[4] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[5] = {1'b1, 1'b0, 1'b1, 1'b0};
    vectors[6] = {1'b0, 1'b0, 1'bx, 1'bx};
    vectors[7] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[8] = {1'b1, 1'b1, 1'b0, 1'b1};
    vectors[9] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[10] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[11] = {1'b0, 1'b0, 1'bx, 1'bx};
    vectors[12] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[13] = {1'b1, 1'b1, 1'b0, 1'b1};
    vectors[14] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[15] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[16] = {1'b1, 1'b0, 1'bx, 1'bx};
    vectors[17] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[18] = {1'b0, 1'b1, 1'b1, 1'b0};
    vectors[19] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[20] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[21] = {1'b1, 1'b0, 1'bx, 1'bx};
    vectors[22] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[23] = {1'b0, 1'b1, 1'b1, 1'b0};
    vectors[24] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[25] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[26] = {1'b0, 1'b0, 1'bx, 1'bx};
    vectors[27] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[28] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[29] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[30] = {1'b1, 1'b0, 1'bx, 1'bx};
    vectors[31] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[32] = {1'b1, 1'b0, 1'b1, 1'b0};
    vectors[33] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[34] = {1'b0, 1'b0, 1'bx, 1'bx};
    vectors[35] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[36] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[37] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[38] = {1'b0, 1'b0, 1'bx, 1'bx};
    vectors[39] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[40] = {1'b0, 1'b0, 1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {D, ICLK} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_Q_LOCATION] !== Q && ivector[OUTPUT_Q_LOCATION] !== 1'bx)
        $display("testbench ERROR : DFRX1:Q output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_Q_LOCATION], Q);
      if(ivector[OUTPUT_QN_LOCATION] !== QN && ivector[OUTPUT_QN_LOCATION] !== 1'bx)
        $display("testbench ERROR : DFRX1:QN output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_QN_LOCATION], QN);
    end

  end

endmodule

module DLHLX1_test_Q_QN;

  DLHLX1 instance0(.G(G), .D(D), .Q(Q), .QN(QN));

  DLHLX1_stim_Q_QN instance1(.G(G), .D(D), .Q(Q), .QN(QN));

endmodule

module DLHLX1_stim_Q_QN(G, D, Q, QN);

  output G;
  reg G;
  output D;
  reg D;
  input Q;
  input QN;

  parameter NUM_INPUT_BITS = 2;
  parameter NUM_OUTPUT_BITS = 2;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_Q_LOCATION = 2;
  parameter OUTPUT_QN_LOCATION = 3;

  parameter NUM_VECTORS = 40;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[1] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[2] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[3] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[4] = {1'b1, 1'b0, 1'b1, 1'b0};
    vectors[5] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[6] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[7] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[8] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[9] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[10] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[11] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[12] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[13] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[14] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[15] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[16] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[17] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[18] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[19] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[20] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[21] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[22] = {1'b1, 1'b0, 1'b1, 1'b0};
    vectors[23] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[24] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[25] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[26] = {1'b1, 1'b0, 1'b1, 1'b0};
    vectors[27] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[28] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[29] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[30] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[31] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[32] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[33] = {1'b1, 1'b0, 1'b1, 1'b0};
    vectors[34] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[35] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[36] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[37] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[38] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[39] = {1'b0, 1'b0, 1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {D, G} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_Q_LOCATION] !== Q && ivector[OUTPUT_Q_LOCATION] !== 1'bx)
        $display("testbench ERROR : DLHLX1:Q output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_Q_LOCATION], Q);
      if(ivector[OUTPUT_QN_LOCATION] !== QN && ivector[OUTPUT_QN_LOCATION] !== 1'bx)
        $display("testbench ERROR : DLHLX1:QN output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_QN_LOCATION], QN);
    end

  end

endmodule

module DLHQLX1_test_Q;

  DLHQLX1 instance0(.G(G), .D(D), .Q(Q));

  DLHQLX1_stim_Q instance1(.G(G), .D(D), .Q(Q));

endmodule

module DLHQLX1_stim_Q(G, D, Q);

  output G;
  reg G;
  output D;
  reg D;
  input Q;

  parameter NUM_INPUT_BITS = 2;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_Q_LOCATION = 2;

  parameter NUM_VECTORS = 28;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1, 1'b0};
    vectors[1] = {1'b0, 1'b0, 1'b0};
    vectors[2] = {1'b1, 1'b0, 1'b0};
    vectors[3] = {1'b1, 1'b1, 1'b1};
    vectors[4] = {1'b1, 1'b0, 1'b1};
    vectors[5] = {1'b0, 1'b1, 1'b0};
    vectors[6] = {1'b1, 1'b1, 1'b1};
    vectors[7] = {1'b1, 1'b1, 1'b1};
    vectors[8] = {1'b0, 1'b1, 1'b0};
    vectors[9] = {1'b0, 1'b1, 1'b0};
    vectors[10] = {1'b0, 1'b0, 1'b0};
    vectors[11] = {1'b1, 1'b0, 1'b0};
    vectors[12] = {1'b1, 1'b1, 1'b1};
    vectors[13] = {1'b1, 1'b1, 1'b1};
    vectors[14] = {1'b1, 1'b0, 1'b1};
    vectors[15] = {1'b0, 1'b0, 1'b1};
    vectors[16] = {1'b0, 1'b1, 1'b0};
    vectors[17] = {1'b0, 1'b1, 1'b0};
    vectors[18] = {1'b0, 1'b0, 1'b0};
    vectors[19] = {1'b1, 1'b0, 1'b0};
    vectors[20] = {1'b1, 1'b1, 1'b1};
    vectors[21] = {1'b1, 1'b0, 1'b1};
    vectors[22] = {1'b0, 1'b0, 1'b1};
    vectors[23] = {1'b0, 1'b1, 1'b0};
    vectors[24] = {1'b0, 1'b0, 1'b0};
    vectors[25] = {1'b0, 1'b1, 1'b0};
    vectors[26] = {1'b0, 1'b1, 1'b0};
    vectors[27] = {1'b0, 1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {D, G} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_Q_LOCATION] !== Q && ivector[OUTPUT_Q_LOCATION] !== 1'bx)
        $display("testbench ERROR : DLHQLX1:Q output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_Q_LOCATION], Q);
    end

  end

endmodule

module DLHRLX1_test_Q_QN;

  DLHRLX1 instance0(.D(D), .G(G), .R(R), .Q(Q), .QN(QN));

  DLHRLX1_stim_Q_QN instance1(.D(D), .G(G), .R(R), .Q(Q), .QN(QN));

endmodule

module DLHRLX1_stim_Q_QN(D, G, R, Q, QN);

  output D;
  reg D;
  output G;
  reg G;
  output R;
  reg R;
  input Q;
  input QN;

  parameter NUM_INPUT_BITS = 3;
  parameter NUM_OUTPUT_BITS = 2;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_Q_LOCATION = 3;
  parameter OUTPUT_QN_LOCATION = 4;

  parameter NUM_VECTORS = 56;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[1] = {1'b1, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[2] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[3] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[4] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[5] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[6] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[7] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[8] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[9] = {1'b0, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[10] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[11] = {1'b0, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[12] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[13] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[14] = {1'b0, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[15] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[16] = {1'b0, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[17] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[18] = {1'b1, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[19] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[20] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[21] = {1'b1, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[22] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[23] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[24] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[25] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[26] = {1'b0, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[27] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[28] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[29] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[30] = {1'b0, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[31] = {1'b1, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[32] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[33] = {1'b1, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[34] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[35] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[36] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[37] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[38] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[39] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[40] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[41] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[42] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[43] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[44] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[45] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[46] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[47] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[48] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[49] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[50] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[51] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[52] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[53] = {1'b0, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[54] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[55] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {D, G, R} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_Q_LOCATION] !== Q && ivector[OUTPUT_Q_LOCATION] !== 1'bx)
        $display("testbench ERROR : DLHRLX1:Q output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_Q_LOCATION], Q);
      if(ivector[OUTPUT_QN_LOCATION] !== QN && ivector[OUTPUT_QN_LOCATION] !== 1'bx)
        $display("testbench ERROR : DLHRLX1:QN output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_QN_LOCATION], QN);
    end

  end

endmodule

module DLHRQLX1_test_Q;

  DLHRQLX1 instance0(.G(G), .D(D), .R(R), .Q(Q));

  DLHRQLX1_stim_Q instance1(.G(G), .D(D), .R(R), .Q(Q));

endmodule

module DLHRQLX1_stim_Q(G, D, R, Q);

  output G;
  reg G;
  output D;
  reg D;
  output R;
  reg R;
  input Q;

  parameter NUM_INPUT_BITS = 3;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_Q_LOCATION = 3;

  parameter NUM_VECTORS = 39;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b1, 1'b0, 1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b0, 1'b1, 1'b0};
    vectors[2] = {1'b1, 1'b1, 1'b1, 1'b1};
    vectors[3] = {1'b1, 1'b0, 1'b1, 1'b1};
    vectors[4] = {1'b1, 1'b1, 1'b1, 1'b1};
    vectors[5] = {1'b1, 1'b0, 1'b1, 1'b1};
    vectors[6] = {1'b0, 1'b0, 1'b1, 1'b1};
    vectors[7] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[8] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[9] = {1'b0, 1'b1, 1'b1, 1'b0};
    vectors[10] = {1'b1, 1'b1, 1'b1, 1'b1};
    vectors[11] = {1'b1, 1'b1, 1'b1, 1'b1};
    vectors[12] = {1'b0, 1'b1, 1'b1, 1'b0};
    vectors[13] = {1'b1, 1'b0, 1'b0, 1'b0};
    vectors[14] = {1'b1, 1'b0, 1'b1, 1'b0};
    vectors[15] = {1'b1, 1'b1, 1'b1, 1'b1};
    vectors[16] = {1'b1, 1'b1, 1'b1, 1'b1};
    vectors[17] = {1'b1, 1'b0, 1'b1, 1'b1};
    vectors[18] = {1'b0, 1'b0, 1'b1, 1'b1};
    vectors[19] = {1'b0, 1'b1, 1'b1, 1'b0};
    vectors[20] = {1'b1, 1'b1, 1'b0, 1'b0};
    vectors[21] = {1'b1, 1'b1, 1'b1, 1'b1};
    vectors[22] = {1'b1, 1'b1, 1'b1, 1'b1};
    vectors[23] = {1'b1, 1'b0, 1'b1, 1'b1};
    vectors[24] = {1'b0, 1'b0, 1'b1, 1'b1};
    vectors[25] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[26] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[27] = {1'b1, 1'b0, 1'b0, 1'b0};
    vectors[28] = {1'b1, 1'b0, 1'b0, 1'b0};
    vectors[29] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[30] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[31] = {1'b0, 1'b1, 1'b0, 1'b0};
    vectors[32] = {1'b0, 1'b1, 1'b0, 1'b0};
    vectors[33] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[34] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[35] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[36] = {1'b0, 1'b1, 1'b1, 1'b0};
    vectors[37] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[38] = {1'b0, 1'b0, 1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {D, G, R} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_Q_LOCATION] !== Q && ivector[OUTPUT_Q_LOCATION] !== 1'bx)
        $display("testbench ERROR : DLHRQLX1:Q output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_Q_LOCATION], Q);
    end

  end

endmodule

module DLY1LX1_test_Q;

  DLY1LX1 instance0(.D(D), .Q(Q));

  DLY1LX1_stim_Q instance1(.D(D), .Q(Q));

endmodule

module DLY1LX1_stim_Q(D, Q);

  output D;
  reg D;
  input Q;

  parameter NUM_INPUT_BITS = 1;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_Q_LOCATION = 1;

  parameter NUM_VECTORS = 4;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b1};
    vectors[2] = {1'b1, 1'b1};
    vectors[3] = {1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {D} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_Q_LOCATION] !== Q && ivector[OUTPUT_Q_LOCATION] !== 1'bx)
        $display("testbench ERROR : DLY1LX1:Q output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_Q_LOCATION], Q);
    end

  end

endmodule

module DLY1p6LX1_test_Q;

  DLY1p6LX1 instance0(.D(D), .Q(Q));

  DLY1p6LX1_stim_Q instance1(.D(D), .Q(Q));

endmodule

module DLY1p6LX1_stim_Q(D, Q);

  output D;
  reg D;
  input Q;

  parameter NUM_INPUT_BITS = 1;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_Q_LOCATION = 1;

  parameter NUM_VECTORS = 4;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b1};
    vectors[2] = {1'b1, 1'b1};
    vectors[3] = {1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {D} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_Q_LOCATION] !== Q && ivector[OUTPUT_Q_LOCATION] !== 1'bx)
        $display("testbench ERROR : DLY1p6LX1:Q output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_Q_LOCATION], Q);
    end

  end

endmodule

module DLY2LX1_test_Q;

  DLY2LX1 instance0(.D(D), .Q(Q));

  DLY2LX1_stim_Q instance1(.D(D), .Q(Q));

endmodule

module DLY2LX1_stim_Q(D, Q);

  output D;
  reg D;
  input Q;

  parameter NUM_INPUT_BITS = 1;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_Q_LOCATION = 1;

  parameter NUM_VECTORS = 4;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b1};
    vectors[2] = {1'b1, 1'b1};
    vectors[3] = {1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {D} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_Q_LOCATION] !== Q && ivector[OUTPUT_Q_LOCATION] !== 1'bx)
        $display("testbench ERROR : DLY2LX1:Q output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_Q_LOCATION], Q);
    end

  end

endmodule

module DLY4LX1_test_Q;

  DLY4LX1 instance0(.D(D), .Q(Q));

  DLY4LX1_stim_Q instance1(.D(D), .Q(Q));

endmodule

module DLY4LX1_stim_Q(D, Q);

  output D;
  reg D;
  input Q;

  parameter NUM_INPUT_BITS = 1;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_Q_LOCATION = 1;

  parameter NUM_VECTORS = 4;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b1};
    vectors[2] = {1'b1, 1'b1};
    vectors[3] = {1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {D} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_Q_LOCATION] !== Q && ivector[OUTPUT_Q_LOCATION] !== 1'bx)
        $display("testbench ERROR : DLY4LX1:Q output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_Q_LOCATION], Q);
    end

  end

endmodule

module DLY8LX1_test_Q;

  DLY8LX1 instance0(.D(D), .Q(Q));

  DLY8LX1_stim_Q instance1(.D(D), .Q(Q));

endmodule

module DLY8LX1_stim_Q(D, Q);

  output D;
  reg D;
  input Q;

  parameter NUM_INPUT_BITS = 1;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_Q_LOCATION = 1;

  parameter NUM_VECTORS = 4;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b1};
    vectors[2] = {1'b1, 1'b1};
    vectors[3] = {1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {D} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_Q_LOCATION] !== Q && ivector[OUTPUT_Q_LOCATION] !== 1'bx)
        $display("testbench ERROR : DLY8LX1:Q output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_Q_LOCATION], Q);
    end

  end

endmodule

module EO2X1_test_Z;

  EO2X1 instance0(.A(A), .B(B), .Z(Z));

  EO2X1_stim_Z instance1(.A(A), .B(B), .Z(Z));

endmodule

module EO2X1_stim_Z(A, B, Z);

  output A;
  reg A;
  output B;
  reg B;
  input Z;

  parameter NUM_INPUT_BITS = 2;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_Z_LOCATION = 2;

  parameter NUM_VECTORS = 16;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b0, 1'b1};
    vectors[2] = {1'b0, 1'b1, 1'b1};
    vectors[3] = {1'b1, 1'b1, 1'b0};
    vectors[4] = {1'b1, 1'b1, 1'b0};
    vectors[5] = {1'b0, 1'b1, 1'b1};
    vectors[6] = {1'b1, 1'b0, 1'b1};
    vectors[7] = {1'b0, 1'b0, 1'b0};
    vectors[8] = {1'b0, 1'b0, 1'b0};
    vectors[9] = {1'b0, 1'b1, 1'b1};
    vectors[10] = {1'b1, 1'b0, 1'b1};
    vectors[11] = {1'b1, 1'b1, 1'b0};
    vectors[12] = {1'b1, 1'b1, 1'b0};
    vectors[13] = {1'b1, 1'b0, 1'b1};
    vectors[14] = {1'b0, 1'b1, 1'b1};
    vectors[15] = {1'b0, 1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_Z_LOCATION] !== Z && ivector[OUTPUT_Z_LOCATION] !== 1'bx)
        $display("testbench ERROR : EO2X1:Z output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_Z_LOCATION], Z);
    end

  end

endmodule

module FAX1_test_CO_S;

  FAX1 instance0(.A(A), .B(B), .CI(CI), .CO(CO), .S(S));

  FAX1_stim_CO_S instance1(.A(A), .B(B), .CI(CI), .CO(CO), .S(S));

endmodule

module FAX1_stim_CO_S(A, B, CI, CO, S);

  output A;
  reg A;
  output B;
  reg B;
  output CI;
  reg CI;
  input CO;
  input S;

  parameter NUM_INPUT_BITS = 3;
  parameter NUM_OUTPUT_BITS = 2;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_CO_LOCATION = 3;
  parameter OUTPUT_S_LOCATION = 4;

  parameter NUM_VECTORS = 36;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[2] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[3] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[4] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[5] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[6] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[7] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[8] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[9] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[10] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[11] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[12] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[13] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[14] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[15] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[16] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[17] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[18] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[19] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[20] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[21] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[22] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[23] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[24] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[25] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[26] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[27] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[28] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[29] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[30] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[31] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[32] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[33] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[34] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[35] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B, CI} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_CO_LOCATION] !== CO && ivector[OUTPUT_CO_LOCATION] !== 1'bx)
        $display("testbench ERROR : FAX1:CO output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_CO_LOCATION], CO);
      if(ivector[OUTPUT_S_LOCATION] !== S && ivector[OUTPUT_S_LOCATION] !== 1'bx)
        $display("testbench ERROR : FAX1:S output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_S_LOCATION], S);
    end

  end

endmodule

module HAX1_test_CO_S;

  HAX1 instance0(.B(B), .A(A), .CO(CO), .S(S));

  HAX1_stim_CO_S instance1(.B(B), .A(A), .CO(CO), .S(S));

endmodule

module HAX1_stim_CO_S(B, A, CO, S);

  output B;
  reg B;
  output A;
  reg A;
  input CO;
  input S;

  parameter NUM_INPUT_BITS = 2;
  parameter NUM_OUTPUT_BITS = 2;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_CO_LOCATION = 2;
  parameter OUTPUT_S_LOCATION = 3;

  parameter NUM_VECTORS = 24;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[2] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[3] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[4] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[5] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[6] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[7] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[8] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[9] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[10] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[11] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[12] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[13] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[14] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[15] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[16] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[17] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[18] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[19] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[20] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[21] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[22] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[23] = {1'b1, 1'b0, 1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_CO_LOCATION] !== CO && ivector[OUTPUT_CO_LOCATION] !== 1'bx)
        $display("testbench ERROR : HAX1:CO output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_CO_LOCATION], CO);
      if(ivector[OUTPUT_S_LOCATION] !== S && ivector[OUTPUT_S_LOCATION] !== 1'bx)
        $display("testbench ERROR : HAX1:S output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_S_LOCATION], S);
    end

  end

endmodule

module INX1_test_OUT;

  INX1 instance0(.IN(IN), .OUT(OUT));

  INX1_stim_OUT instance1(.IN(IN), .OUT(OUT));

endmodule

module INX1_stim_OUT(IN, OUT);

  output IN;
  reg IN;
  input OUT;

  parameter NUM_INPUT_BITS = 1;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 1;

  parameter NUM_VECTORS = 4;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1};
    vectors[1] = {1'b1, 1'b0};
    vectors[2] = {1'b1, 1'b0};
    vectors[3] = {1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {IN} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : INX1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module INX16_test_OUT;

  INX16 instance0(.IN(IN), .OUT(OUT));

  INX16_stim_OUT instance1(.IN(IN), .OUT(OUT));

endmodule

module INX16_stim_OUT(IN, OUT);

  output IN;
  reg IN;
  input OUT;

  parameter NUM_INPUT_BITS = 1;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 1;

  parameter NUM_VECTORS = 4;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1};
    vectors[1] = {1'b1, 1'b0};
    vectors[2] = {1'b1, 1'b0};
    vectors[3] = {1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {IN} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : INX16:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module INX2_test_OUT;

  INX2 instance0(.IN(IN), .OUT(OUT));

  INX2_stim_OUT instance1(.IN(IN), .OUT(OUT));

endmodule

module INX2_stim_OUT(IN, OUT);

  output IN;
  reg IN;
  input OUT;

  parameter NUM_INPUT_BITS = 1;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 1;

  parameter NUM_VECTORS = 4;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1};
    vectors[1] = {1'b1, 1'b0};
    vectors[2] = {1'b1, 1'b0};
    vectors[3] = {1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {IN} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : INX2:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module INX32_test_OUT;

  INX32 instance0(.IN(IN), .OUT(OUT));

  INX32_stim_OUT instance1(.IN(IN), .OUT(OUT));

endmodule

module INX32_stim_OUT(IN, OUT);

  output IN;
  reg IN;
  input OUT;

  parameter NUM_INPUT_BITS = 1;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 1;

  parameter NUM_VECTORS = 4;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1};
    vectors[1] = {1'b1, 1'b0};
    vectors[2] = {1'b1, 1'b0};
    vectors[3] = {1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {IN} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : INX32:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module INX4_test_OUT;

  INX4 instance0(.IN(IN), .OUT(OUT));

  INX4_stim_OUT instance1(.IN(IN), .OUT(OUT));

endmodule

module INX4_stim_OUT(IN, OUT);

  output IN;
  reg IN;
  input OUT;

  parameter NUM_INPUT_BITS = 1;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 1;

  parameter NUM_VECTORS = 4;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1};
    vectors[1] = {1'b1, 1'b0};
    vectors[2] = {1'b1, 1'b0};
    vectors[3] = {1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {IN} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : INX4:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module INX6_test_OUT;

  INX6 instance0(.IN(IN), .OUT(OUT));

  INX6_stim_OUT instance1(.IN(IN), .OUT(OUT));

endmodule

module INX6_stim_OUT(IN, OUT);

  output IN;
  reg IN;
  input OUT;

  parameter NUM_INPUT_BITS = 1;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 1;

  parameter NUM_VECTORS = 4;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1};
    vectors[1] = {1'b1, 1'b0};
    vectors[2] = {1'b1, 1'b0};
    vectors[3] = {1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {IN} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : INX6:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module INX8_test_OUT;

  INX8 instance0(.IN(IN), .OUT(OUT));

  INX8_stim_OUT instance1(.IN(IN), .OUT(OUT));

endmodule

module INX8_stim_OUT(IN, OUT);

  output IN;
  reg IN;
  input OUT;

  parameter NUM_INPUT_BITS = 1;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 1;

  parameter NUM_VECTORS = 4;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1};
    vectors[1] = {1'b1, 1'b0};
    vectors[2] = {1'b1, 1'b0};
    vectors[3] = {1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {IN} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : INX8:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module LGCPX1_test_GCLK;

  LGCPX1 instance0(.E(E), .CLK(CLK), .GCLK(GCLK));

  LGCPX1_stim_GCLK instance1(.E(E), .CLK(CLK), .GCLK(GCLK));

endmodule

module LGCPX1_stim_GCLK(E, CLK, GCLK);

  output E;
  reg E;
  output CLK;
  reg CLK;
  input GCLK;

  parameter NUM_INPUT_BITS = 2;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_GCLK_LOCATION = 2;

  parameter NUM_VECTORS = 20;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1, 1'b0};
    vectors[1] = {1'b1, 1'b1, 1'b1};
    vectors[2] = {1'b1, 1'b0, 1'b1};
    vectors[3] = {1'b0, 1'b0, 1'b0};
    vectors[4] = {1'b1, 1'b0, 1'b0};
    vectors[5] = {1'b0, 1'b1, 1'b0};
    vectors[6] = {1'b1, 1'b1, 1'b1};
    vectors[7] = {1'b0, 1'b1, 1'b0};
    vectors[8] = {1'b1, 1'b1, 1'b1};
    vectors[9] = {1'b1, 1'b0, 1'b1};
    vectors[10] = {1'b0, 1'b0, 1'b0};
    vectors[11] = {1'b0, 1'b0, 1'b0};
    vectors[12] = {1'b1, 1'b0, 1'b0};
    vectors[13] = {1'b0, 1'b0, 1'b0};
    vectors[14] = {1'b1, 1'b0, 1'b0};
    vectors[15] = {1'b0, 1'b0, 1'b0};
    vectors[16] = {1'b0, 1'b0, 1'b0};
    vectors[17] = {1'b0, 1'b1, 1'b0};
    vectors[18] = {1'b0, 1'b1, 1'b0};
    vectors[19] = {1'b0, 1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {CLK, E} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_GCLK_LOCATION] !== GCLK && ivector[OUTPUT_GCLK_LOCATION] !== 1'bx)
        $display("testbench ERROR : LGCPX1:GCLK output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_GCLK_LOCATION], GCLK);
    end

  end

endmodule

module LGCPX2_test_GCLK;

  LGCPX2 instance0(.E(E), .CLK(CLK), .GCLK(GCLK));

  LGCPX2_stim_GCLK instance1(.E(E), .CLK(CLK), .GCLK(GCLK));

endmodule

module LGCPX2_stim_GCLK(E, CLK, GCLK);

  output E;
  reg E;
  output CLK;
  reg CLK;
  input GCLK;

  parameter NUM_INPUT_BITS = 2;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_GCLK_LOCATION = 2;

  parameter NUM_VECTORS = 20;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1, 1'b0};
    vectors[1] = {1'b1, 1'b1, 1'b1};
    vectors[2] = {1'b1, 1'b0, 1'b1};
    vectors[3] = {1'b0, 1'b0, 1'b0};
    vectors[4] = {1'b1, 1'b0, 1'b0};
    vectors[5] = {1'b0, 1'b1, 1'b0};
    vectors[6] = {1'b1, 1'b1, 1'b1};
    vectors[7] = {1'b0, 1'b1, 1'b0};
    vectors[8] = {1'b1, 1'b1, 1'b1};
    vectors[9] = {1'b1, 1'b0, 1'b1};
    vectors[10] = {1'b0, 1'b0, 1'b0};
    vectors[11] = {1'b0, 1'b0, 1'b0};
    vectors[12] = {1'b1, 1'b0, 1'b0};
    vectors[13] = {1'b0, 1'b0, 1'b0};
    vectors[14] = {1'b1, 1'b0, 1'b0};
    vectors[15] = {1'b0, 1'b0, 1'b0};
    vectors[16] = {1'b0, 1'b0, 1'b0};
    vectors[17] = {1'b0, 1'b1, 1'b0};
    vectors[18] = {1'b0, 1'b1, 1'b0};
    vectors[19] = {1'b0, 1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {CLK, E} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_GCLK_LOCATION] !== GCLK && ivector[OUTPUT_GCLK_LOCATION] !== 1'bx)
        $display("testbench ERROR : LGCPX2:GCLK output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_GCLK_LOCATION], GCLK);
    end

  end

endmodule

module LGCPX3_test_GCLK;

  LGCPX3 instance0(.CLK(CLK), .E(E), .GCLK(GCLK));

  LGCPX3_stim_GCLK instance1(.CLK(CLK), .E(E), .GCLK(GCLK));

endmodule

module LGCPX3_stim_GCLK(CLK, E, GCLK);

  output CLK;
  reg CLK;
  output E;
  reg E;
  input GCLK;

  parameter NUM_INPUT_BITS = 2;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_GCLK_LOCATION = 2;

  parameter NUM_VECTORS = 20;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1, 1'b0};
    vectors[1] = {1'b1, 1'b1, 1'b1};
    vectors[2] = {1'b1, 1'b0, 1'b1};
    vectors[3] = {1'b0, 1'b0, 1'b0};
    vectors[4] = {1'b1, 1'b0, 1'b0};
    vectors[5] = {1'b0, 1'b1, 1'b0};
    vectors[6] = {1'b1, 1'b1, 1'b1};
    vectors[7] = {1'b0, 1'b1, 1'b0};
    vectors[8] = {1'b1, 1'b1, 1'b1};
    vectors[9] = {1'b1, 1'b0, 1'b1};
    vectors[10] = {1'b0, 1'b0, 1'b0};
    vectors[11] = {1'b0, 1'b0, 1'b0};
    vectors[12] = {1'b1, 1'b0, 1'b0};
    vectors[13] = {1'b0, 1'b0, 1'b0};
    vectors[14] = {1'b1, 1'b0, 1'b0};
    vectors[15] = {1'b0, 1'b0, 1'b0};
    vectors[16] = {1'b0, 1'b0, 1'b0};
    vectors[17] = {1'b0, 1'b1, 1'b0};
    vectors[18] = {1'b0, 1'b1, 1'b0};
    vectors[19] = {1'b0, 1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {CLK, E} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_GCLK_LOCATION] !== GCLK && ivector[OUTPUT_GCLK_LOCATION] !== 1'bx)
        $display("testbench ERROR : LGCPX3:GCLK output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_GCLK_LOCATION], GCLK);
    end

  end

endmodule

module LSGCPX1_test_GCLK;

  LSGCPX1 instance0(.SE(SE), .E(E), .CLK(CLK), .GCLK(GCLK));

  LSGCPX1_stim_GCLK instance1(.SE(SE), .E(E), .CLK(CLK), .GCLK(GCLK));

endmodule

module LSGCPX1_stim_GCLK(SE, E, CLK, GCLK);

  output SE;
  reg SE;
  output E;
  reg E;
  output CLK;
  reg CLK;
  input GCLK;

  parameter NUM_INPUT_BITS = 3;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_GCLK_LOCATION = 3;

  parameter NUM_VECTORS = 24;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1, 1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b1, 1'b0, 1'b1};
    vectors[2] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[3] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[4] = {1'b1, 1'b0, 1'b0, 1'b0};
    vectors[5] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[6] = {1'b1, 1'b0, 1'b1, 1'b1};
    vectors[7] = {1'b0, 1'b1, 1'b0, 1'b0};
    vectors[8] = {1'b1, 1'b1, 1'b0, 1'b1};
    vectors[9] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[10] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[11] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[12] = {1'b1, 1'b0, 1'b0, 1'b0};
    vectors[13] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[14] = {1'b1, 1'b0, 1'b0, 1'b0};
    vectors[15] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[16] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[17] = {1'b0, 1'b1, 1'b0, 1'b0};
    vectors[18] = {1'b0, 1'b1, 1'b0, 1'b0};
    vectors[19] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[20] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[21] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[22] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[23] = {1'b0, 1'b0, 1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {CLK, E, SE} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_GCLK_LOCATION] !== GCLK && ivector[OUTPUT_GCLK_LOCATION] !== 1'bx)
        $display("testbench ERROR : LSGCPX1:GCLK output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_GCLK_LOCATION], GCLK);
    end

  end

endmodule

module LSGCPX2_test_GCLK;

  LSGCPX2 instance0(.SE(SE), .E(E), .CLK(CLK), .GCLK(GCLK));

  LSGCPX2_stim_GCLK instance1(.SE(SE), .E(E), .CLK(CLK), .GCLK(GCLK));

endmodule

module LSGCPX2_stim_GCLK(SE, E, CLK, GCLK);

  output SE;
  reg SE;
  output E;
  reg E;
  output CLK;
  reg CLK;
  input GCLK;

  parameter NUM_INPUT_BITS = 3;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_GCLK_LOCATION = 3;

  parameter NUM_VECTORS = 24;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1, 1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b1, 1'b0, 1'b1};
    vectors[2] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[3] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[4] = {1'b1, 1'b0, 1'b0, 1'b0};
    vectors[5] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[6] = {1'b1, 1'b0, 1'b1, 1'b1};
    vectors[7] = {1'b0, 1'b1, 1'b0, 1'b0};
    vectors[8] = {1'b1, 1'b1, 1'b0, 1'b1};
    vectors[9] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[10] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[11] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[12] = {1'b1, 1'b0, 1'b0, 1'b0};
    vectors[13] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[14] = {1'b1, 1'b0, 1'b0, 1'b0};
    vectors[15] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[16] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[17] = {1'b0, 1'b1, 1'b0, 1'b0};
    vectors[18] = {1'b0, 1'b1, 1'b0, 1'b0};
    vectors[19] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[20] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[21] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[22] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[23] = {1'b0, 1'b0, 1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {CLK, E, SE} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_GCLK_LOCATION] !== GCLK && ivector[OUTPUT_GCLK_LOCATION] !== 1'bx)
        $display("testbench ERROR : LSGCPX2:GCLK output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_GCLK_LOCATION], GCLK);
    end

  end

endmodule

module LSGCPX3_test_GCLK;

  LSGCPX3 instance0(.CLK(CLK), .E(E), .SE(SE), .GCLK(GCLK));

  LSGCPX3_stim_GCLK instance1(.CLK(CLK), .E(E), .SE(SE), .GCLK(GCLK));

endmodule

module LSGCPX3_stim_GCLK(CLK, E, SE, GCLK);

  output CLK;
  reg CLK;
  output E;
  reg E;
  output SE;
  reg SE;
  input GCLK;

  parameter NUM_INPUT_BITS = 3;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_GCLK_LOCATION = 3;

  parameter NUM_VECTORS = 24;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1, 1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b1, 1'b0, 1'b1};
    vectors[2] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[3] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[4] = {1'b1, 1'b0, 1'b0, 1'b0};
    vectors[5] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[6] = {1'b1, 1'b0, 1'b1, 1'b1};
    vectors[7] = {1'b0, 1'b1, 1'b0, 1'b0};
    vectors[8] = {1'b1, 1'b1, 1'b0, 1'b1};
    vectors[9] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[10] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[11] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[12] = {1'b1, 1'b0, 1'b0, 1'b0};
    vectors[13] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[14] = {1'b1, 1'b0, 1'b0, 1'b0};
    vectors[15] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[16] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[17] = {1'b0, 1'b1, 1'b0, 1'b0};
    vectors[18] = {1'b0, 1'b1, 1'b0, 1'b0};
    vectors[19] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[20] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[21] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[22] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[23] = {1'b0, 1'b0, 1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {CLK, E, SE} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_GCLK_LOCATION] !== GCLK && ivector[OUTPUT_GCLK_LOCATION] !== 1'bx)
        $display("testbench ERROR : LSGCPX3:GCLK output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_GCLK_LOCATION], GCLK);
    end

  end

endmodule

module LSOGCPX1_test_CGOBS_GCLK;

  LSOGCPX1 instance0(.SE(SE), .E(E), .CLK(CLK), .CGOBS(CGOBS), .GCLK(GCLK));

  LSOGCPX1_stim_CGOBS_GCLK instance1(.SE(SE), .E(E), .CLK(CLK), .CGOBS(CGOBS), .GCLK(GCLK));

endmodule

module LSOGCPX1_stim_CGOBS_GCLK(SE, E, CLK, CGOBS, GCLK);

  output SE;
  reg SE;
  output E;
  reg E;
  output CLK;
  reg CLK;
  input CGOBS;
  input GCLK;

  parameter NUM_INPUT_BITS = 3;
  parameter NUM_OUTPUT_BITS = 2;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_CGOBS_LOCATION = 3;
  parameter OUTPUT_GCLK_LOCATION = 4;

  parameter NUM_VECTORS = 44;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[2] = {1'b1, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[3] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[4] = {1'b1, 1'b1, 1'b0, 1'b1, 1'b1};
    vectors[5] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[6] = {1'b1, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[7] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[8] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[9] = {1'b1, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[10] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[11] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[12] = {1'b1, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[13] = {1'b1, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[14] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[15] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[16] = {1'b1, 1'b1, 1'b0, 1'b1, 1'b1};
    vectors[17] = {1'b1, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[18] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[19] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[20] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[21] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[22] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[23] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[24] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[25] = {1'b1, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[26] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[27] = {1'b1, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[28] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[29] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[30] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[31] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[32] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[33] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[34] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[35] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[36] = {1'b1, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[37] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[38] = {1'b1, 1'b1, 1'b0, 1'b1, 1'b1};
    vectors[39] = {1'b1, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[40] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[41] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[42] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[43] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {CLK, E, SE} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_CGOBS_LOCATION] !== CGOBS && ivector[OUTPUT_CGOBS_LOCATION] !== 1'bx)
        $display("testbench ERROR : LSOGCPX1:CGOBS output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_CGOBS_LOCATION], CGOBS);
      if(ivector[OUTPUT_GCLK_LOCATION] !== GCLK && ivector[OUTPUT_GCLK_LOCATION] !== 1'bx)
        $display("testbench ERROR : LSOGCPX1:GCLK output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_GCLK_LOCATION], GCLK);
    end

  end

endmodule

module LSOGCPX2_test_CGOBS_GCLK;

  LSOGCPX2 instance0(.SE(SE), .E(E), .CLK(CLK), .CGOBS(CGOBS), .GCLK(GCLK));

  LSOGCPX2_stim_CGOBS_GCLK instance1(.SE(SE), .E(E), .CLK(CLK), .CGOBS(CGOBS), .GCLK(GCLK));

endmodule

module LSOGCPX2_stim_CGOBS_GCLK(SE, E, CLK, CGOBS, GCLK);

  output SE;
  reg SE;
  output E;
  reg E;
  output CLK;
  reg CLK;
  input CGOBS;
  input GCLK;

  parameter NUM_INPUT_BITS = 3;
  parameter NUM_OUTPUT_BITS = 2;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_CGOBS_LOCATION = 3;
  parameter OUTPUT_GCLK_LOCATION = 4;

  parameter NUM_VECTORS = 44;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[2] = {1'b1, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[3] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[4] = {1'b1, 1'b1, 1'b0, 1'b1, 1'b1};
    vectors[5] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[6] = {1'b1, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[7] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[8] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[9] = {1'b1, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[10] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[11] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[12] = {1'b1, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[13] = {1'b1, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[14] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[15] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[16] = {1'b1, 1'b1, 1'b0, 1'b1, 1'b1};
    vectors[17] = {1'b1, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[18] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[19] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[20] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[21] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[22] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[23] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[24] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[25] = {1'b1, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[26] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[27] = {1'b1, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[28] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[29] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[30] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[31] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[32] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[33] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[34] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[35] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[36] = {1'b1, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[37] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[38] = {1'b1, 1'b1, 1'b0, 1'b1, 1'b1};
    vectors[39] = {1'b1, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[40] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[41] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[42] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[43] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {CLK, E, SE} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_CGOBS_LOCATION] !== CGOBS && ivector[OUTPUT_CGOBS_LOCATION] !== 1'bx)
        $display("testbench ERROR : LSOGCPX2:CGOBS output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_CGOBS_LOCATION], CGOBS);
      if(ivector[OUTPUT_GCLK_LOCATION] !== GCLK && ivector[OUTPUT_GCLK_LOCATION] !== 1'bx)
        $display("testbench ERROR : LSOGCPX2:GCLK output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_GCLK_LOCATION], GCLK);
    end

  end

endmodule

module LSOGCPX3_test_CGOBS_GCLK;

  LSOGCPX3 instance0(.SE(SE), .E(E), .CLK(CLK), .CGOBS(CGOBS), .GCLK(GCLK));

  LSOGCPX3_stim_CGOBS_GCLK instance1(.SE(SE), .E(E), .CLK(CLK), .CGOBS(CGOBS), .GCLK(GCLK));

endmodule

module LSOGCPX3_stim_CGOBS_GCLK(SE, E, CLK, CGOBS, GCLK);

  output SE;
  reg SE;
  output E;
  reg E;
  output CLK;
  reg CLK;
  input CGOBS;
  input GCLK;

  parameter NUM_INPUT_BITS = 3;
  parameter NUM_OUTPUT_BITS = 2;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_CGOBS_LOCATION = 3;
  parameter OUTPUT_GCLK_LOCATION = 4;

  parameter NUM_VECTORS = 44;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[2] = {1'b1, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[3] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[4] = {1'b1, 1'b1, 1'b0, 1'b1, 1'b1};
    vectors[5] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[6] = {1'b1, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[7] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[8] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[9] = {1'b1, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[10] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[11] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[12] = {1'b1, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[13] = {1'b1, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[14] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[15] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[16] = {1'b1, 1'b1, 1'b0, 1'b1, 1'b1};
    vectors[17] = {1'b1, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[18] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[19] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[20] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[21] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[22] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[23] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[24] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[25] = {1'b1, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[26] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[27] = {1'b1, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[28] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[29] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[30] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[31] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[32] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[33] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[34] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[35] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[36] = {1'b1, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[37] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[38] = {1'b1, 1'b1, 1'b0, 1'b1, 1'b1};
    vectors[39] = {1'b1, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[40] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[41] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[42] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[43] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {CLK, E, SE} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_CGOBS_LOCATION] !== CGOBS && ivector[OUTPUT_CGOBS_LOCATION] !== 1'bx)
        $display("testbench ERROR : LSOGCPX3:CGOBS output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_CGOBS_LOCATION], CGOBS);
      if(ivector[OUTPUT_GCLK_LOCATION] !== GCLK && ivector[OUTPUT_GCLK_LOCATION] !== 1'bx)
        $display("testbench ERROR : LSOGCPX3:GCLK output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_GCLK_LOCATION], GCLK);
    end

  end

endmodule

module MU2IX1_test_QN;

  MU2IX1 instance0(.S(S), .IN0(IN0), .IN1(IN1), .QN(QN));

  MU2IX1_stim_QN instance1(.S(S), .IN0(IN0), .IN1(IN1), .QN(QN));

endmodule

module MU2IX1_stim_QN(S, IN0, IN1, QN);

  output S;
  reg S;
  output IN0;
  reg IN0;
  output IN1;
  reg IN1;
  input QN;

  parameter NUM_INPUT_BITS = 3;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_QN_LOCATION = 3;

  parameter NUM_VECTORS = 28;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[1] = {1'b1, 1'b0, 1'b0, 1'b0};
    vectors[2] = {1'b1, 1'b0, 1'b0, 1'b0};
    vectors[3] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[4] = {1'b0, 1'b0, 1'b1, 1'b1};
    vectors[5] = {1'b0, 1'b1, 1'b1, 1'b0};
    vectors[6] = {1'b0, 1'b1, 1'b1, 1'b0};
    vectors[7] = {1'b0, 1'b0, 1'b1, 1'b1};
    vectors[8] = {1'b1, 1'b0, 1'b0, 1'b0};
    vectors[9] = {1'b1, 1'b0, 1'b1, 1'b1};
    vectors[10] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[11] = {1'b0, 1'b1, 1'b1, 1'b0};
    vectors[12] = {1'b0, 1'b1, 1'b1, 1'b0};
    vectors[13] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[14] = {1'b1, 1'b0, 1'b1, 1'b1};
    vectors[15] = {1'b1, 1'b0, 1'b0, 1'b0};
    vectors[16] = {1'b0, 1'b0, 1'b1, 1'b1};
    vectors[17] = {1'b1, 1'b0, 1'b1, 1'b1};
    vectors[18] = {1'b1, 1'b0, 1'b1, 1'b1};
    vectors[19] = {1'b0, 1'b0, 1'b1, 1'b1};
    vectors[20] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[21] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[22] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[23] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[24] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[25] = {1'b0, 1'b0, 1'b1, 1'b1};
    vectors[26] = {1'b0, 1'b0, 1'b1, 1'b1};
    vectors[27] = {1'b0, 1'b0, 1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {IN0, IN1, S} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_QN_LOCATION] !== QN && ivector[OUTPUT_QN_LOCATION] !== 1'bx)
        $display("testbench ERROR : MU2IX1:QN output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_QN_LOCATION], QN);
    end

  end

endmodule

module MU2X1_test_Q;

  MU2X1 instance0(.IN0(IN0), .IN1(IN1), .S(S), .Q(Q));

  MU2X1_stim_Q instance1(.IN0(IN0), .IN1(IN1), .S(S), .Q(Q));

endmodule

module MU2X1_stim_Q(IN0, IN1, S, Q);

  output IN0;
  reg IN0;
  output IN1;
  reg IN1;
  output S;
  reg S;
  input Q;

  parameter NUM_INPUT_BITS = 3;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_Q_LOCATION = 3;

  parameter NUM_VECTORS = 28;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[2] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[3] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[4] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[5] = {1'b0, 1'b1, 1'b1, 1'b1};
    vectors[6] = {1'b0, 1'b1, 1'b1, 1'b1};
    vectors[7] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[8] = {1'b0, 1'b1, 1'b0, 1'b0};
    vectors[9] = {1'b0, 1'b1, 1'b1, 1'b1};
    vectors[10] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[11] = {1'b1, 1'b0, 1'b1, 1'b0};
    vectors[12] = {1'b1, 1'b0, 1'b1, 1'b0};
    vectors[13] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[14] = {1'b0, 1'b1, 1'b1, 1'b1};
    vectors[15] = {1'b0, 1'b1, 1'b0, 1'b0};
    vectors[16] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[17] = {1'b1, 1'b0, 1'b1, 1'b0};
    vectors[18] = {1'b1, 1'b0, 1'b1, 1'b0};
    vectors[19] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[20] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[21] = {1'b0, 1'b1, 1'b0, 1'b0};
    vectors[22] = {1'b0, 1'b1, 1'b0, 1'b0};
    vectors[23] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[24] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[25] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[26] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[27] = {1'b0, 1'b0, 1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {IN0, IN1, S} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_Q_LOCATION] !== Q && ivector[OUTPUT_Q_LOCATION] !== 1'bx)
        $display("testbench ERROR : MU2X1:Q output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_Q_LOCATION], Q);
    end

  end

endmodule

module MU4IX1_test_NQ;

  MU4IX1 instance0(.IN1(IN1), .IN0(IN0), .S0(S0), .IN3(IN3), .IN2(IN2), .S1(S1), .NQ(NQ));

  MU4IX1_stim_NQ instance1(.IN1(IN1), .IN0(IN0), .S0(S0), .IN3(IN3), .IN2(IN2), .S1(S1), .NQ(NQ));

endmodule

module MU4IX1_stim_NQ(IN1, IN0, S0, IN3, IN2, S1, NQ);

  output IN1;
  reg IN1;
  output IN0;
  reg IN0;
  output S0;
  reg S0;
  output IN3;
  reg IN3;
  output IN2;
  reg IN2;
  output S1;
  reg S1;
  input NQ;

  parameter NUM_INPUT_BITS = 6;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_NQ_LOCATION = 6;

  parameter NUM_VECTORS = 56;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[1] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[2] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[3] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[4] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[5] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[6] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[7] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[8] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[9] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[10] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[11] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[12] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[13] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[14] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[15] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[16] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[17] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[18] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b1};
    vectors[19] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[20] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[21] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b1};
    vectors[22] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[23] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[24] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[25] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[26] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[27] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[28] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[29] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[30] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[31] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[32] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[33] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[34] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[35] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[36] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[37] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[38] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[39] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[40] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[41] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[42] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[43] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[44] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[45] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[46] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[47] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[48] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[49] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[50] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[51] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[52] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[53] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[54] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[55] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {IN0, IN1, IN2, IN3, S0, S1} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_NQ_LOCATION] !== NQ && ivector[OUTPUT_NQ_LOCATION] !== 1'bx)
        $display("testbench ERROR : MU4IX1:NQ output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_NQ_LOCATION], NQ);
    end

  end

endmodule

module MU4X1_test_Q;

  MU4X1 instance0(.IN1(IN1), .IN0(IN0), .S0(S0), .IN3(IN3), .IN2(IN2), .S1(S1), .Q(Q));

  MU4X1_stim_Q instance1(.IN1(IN1), .IN0(IN0), .S0(S0), .IN3(IN3), .IN2(IN2), .S1(S1), .Q(Q));

endmodule

module MU4X1_stim_Q(IN1, IN0, S0, IN3, IN2, S1, Q);

  output IN1;
  reg IN1;
  output IN0;
  reg IN0;
  output S0;
  reg S0;
  output IN3;
  reg IN3;
  output IN2;
  reg IN2;
  output S1;
  reg S1;
  input Q;

  parameter NUM_INPUT_BITS = 6;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_Q_LOCATION = 6;

  parameter NUM_VECTORS = 56;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[2] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[3] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[4] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[5] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[6] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[7] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[8] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[9] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[10] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[11] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[12] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[13] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[14] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[15] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[16] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[17] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[18] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[19] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[20] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[21] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[22] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[23] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[24] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b0};
    vectors[25] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[26] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[27] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[28] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[29] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[30] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[31] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b0};
    vectors[32] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[33] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[34] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[35] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[36] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[37] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[38] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[39] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[40] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[41] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[42] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[43] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[44] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[45] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[46] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[47] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[48] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[49] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[50] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[51] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[52] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[53] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[54] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[55] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {IN0, IN1, IN2, IN3, S0, S1} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_Q_LOCATION] !== Q && ivector[OUTPUT_Q_LOCATION] !== 1'bx)
        $display("testbench ERROR : MU4X1:Q output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_Q_LOCATION], Q);
    end

  end

endmodule

module NA2I1X1_test_OUT;

  NA2I1X1 instance0(.B(B), .A(A), .OUT(OUT));

  NA2I1X1_stim_OUT instance1(.B(B), .A(A), .OUT(OUT));

endmodule

module NA2I1X1_stim_OUT(B, A, OUT);

  output B;
  reg B;
  output A;
  reg A;
  input OUT;

  parameter NUM_INPUT_BITS = 2;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 2;

  parameter NUM_VECTORS = 16;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1, 1'b0};
    vectors[1] = {1'b1, 1'b1, 1'b1};
    vectors[2] = {1'b1, 1'b1, 1'b1};
    vectors[3] = {1'b0, 1'b1, 1'b0};
    vectors[4] = {1'b0, 1'b0, 1'b1};
    vectors[5] = {1'b0, 1'b1, 1'b0};
    vectors[6] = {1'b0, 1'b1, 1'b0};
    vectors[7] = {1'b0, 1'b0, 1'b1};
    vectors[8] = {1'b0, 1'b0, 1'b1};
    vectors[9] = {1'b1, 1'b0, 1'b1};
    vectors[10] = {1'b1, 1'b0, 1'b1};
    vectors[11] = {1'b0, 1'b0, 1'b1};
    vectors[12] = {1'b1, 1'b0, 1'b1};
    vectors[13] = {1'b1, 1'b1, 1'b1};
    vectors[14] = {1'b1, 1'b1, 1'b1};
    vectors[15] = {1'b1, 1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : NA2I1X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module NA2X1_test_OUT;

  NA2X1 instance0(.A(A), .B(B), .OUT(OUT));

  NA2X1_stim_OUT instance1(.A(A), .B(B), .OUT(OUT));

endmodule

module NA2X1_stim_OUT(A, B, OUT);

  output A;
  reg A;
  output B;
  reg B;
  input OUT;

  parameter NUM_INPUT_BITS = 2;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 2;

  parameter NUM_VECTORS = 16;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1, 1'b1};
    vectors[1] = {1'b1, 1'b1, 1'b0};
    vectors[2] = {1'b1, 1'b1, 1'b0};
    vectors[3] = {1'b0, 1'b1, 1'b1};
    vectors[4] = {1'b1, 1'b0, 1'b1};
    vectors[5] = {1'b1, 1'b1, 1'b0};
    vectors[6] = {1'b1, 1'b1, 1'b0};
    vectors[7] = {1'b1, 1'b0, 1'b1};
    vectors[8] = {1'b0, 1'b0, 1'b1};
    vectors[9] = {1'b1, 1'b0, 1'b1};
    vectors[10] = {1'b1, 1'b0, 1'b1};
    vectors[11] = {1'b0, 1'b0, 1'b1};
    vectors[12] = {1'b0, 1'b0, 1'b1};
    vectors[13] = {1'b0, 1'b1, 1'b1};
    vectors[14] = {1'b0, 1'b1, 1'b1};
    vectors[15] = {1'b0, 1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : NA2X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module NA3I1X1_test_OUT;

  NA3I1X1 instance0(.NA(NA), .C(C), .B(B), .OUT(OUT));

  NA3I1X1_stim_OUT instance1(.NA(NA), .C(C), .B(B), .OUT(OUT));

endmodule

module NA3I1X1_stim_OUT(NA, C, B, OUT);

  output NA;
  reg NA;
  output C;
  reg C;
  output B;
  reg B;
  input OUT;

  parameter NUM_INPUT_BITS = 3;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 3;

  parameter NUM_VECTORS = 24;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[1] = {1'b1, 1'b1, 1'b0, 1'b0};
    vectors[2] = {1'b1, 1'b1, 1'b0, 1'b0};
    vectors[3] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[4] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[5] = {1'b1, 1'b1, 1'b0, 1'b0};
    vectors[6] = {1'b1, 1'b1, 1'b0, 1'b0};
    vectors[7] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[8] = {1'b1, 1'b1, 1'b0, 1'b0};
    vectors[9] = {1'b1, 1'b1, 1'b1, 1'b1};
    vectors[10] = {1'b1, 1'b1, 1'b1, 1'b1};
    vectors[11] = {1'b1, 1'b1, 1'b0, 1'b0};
    vectors[12] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[13] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[14] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[15] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[16] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[17] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[18] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[19] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[20] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[21] = {1'b0, 1'b0, 1'b1, 1'b1};
    vectors[22] = {1'b0, 1'b0, 1'b1, 1'b1};
    vectors[23] = {1'b0, 1'b0, 1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {B, C, NA} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : NA3I1X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module NA3I2X1_test_OUT;

  NA3I2X1 instance0(.A(A), .C(C), .B(B), .OUT(OUT));

  NA3I2X1_stim_OUT instance1(.A(A), .C(C), .B(B), .OUT(OUT));

endmodule

module NA3I2X1_stim_OUT(A, C, B, OUT);

  output A;
  reg A;
  output C;
  reg C;
  output B;
  reg B;
  input OUT;

  parameter NUM_INPUT_BITS = 3;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 3;

  parameter NUM_VECTORS = 24;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[1] = {1'b1, 1'b0, 1'b1, 1'b1};
    vectors[2] = {1'b1, 1'b0, 1'b1, 1'b1};
    vectors[3] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[4] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[5] = {1'b0, 1'b1, 1'b1, 1'b1};
    vectors[6] = {1'b0, 1'b1, 1'b1, 1'b1};
    vectors[7] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[8] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[9] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[10] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[11] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[12] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[13] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[14] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[15] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[16] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[17] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[18] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[19] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[20] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[21] = {1'b0, 1'b1, 1'b1, 1'b1};
    vectors[22] = {1'b0, 1'b1, 1'b1, 1'b1};
    vectors[23] = {1'b0, 1'b1, 1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B, C} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : NA3I2X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module NA3X1_test_OUT;

  NA3X1 instance0(.A(A), .B(B), .C(C), .OUT(OUT));

  NA3X1_stim_OUT instance1(.A(A), .B(B), .C(C), .OUT(OUT));

endmodule

module NA3X1_stim_OUT(A, B, C, OUT);

  output A;
  reg A;
  output B;
  reg B;
  output C;
  reg C;
  input OUT;

  parameter NUM_INPUT_BITS = 3;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 3;

  parameter NUM_VECTORS = 24;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1, 1'b1, 1'b1};
    vectors[1] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[2] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[3] = {1'b0, 1'b1, 1'b1, 1'b1};
    vectors[4] = {1'b1, 1'b0, 1'b1, 1'b1};
    vectors[5] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[6] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[7] = {1'b1, 1'b0, 1'b1, 1'b1};
    vectors[8] = {1'b1, 1'b1, 1'b0, 1'b1};
    vectors[9] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[10] = {1'b1, 1'b1, 1'b1, 1'b0};
    vectors[11] = {1'b1, 1'b1, 1'b0, 1'b1};
    vectors[12] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[13] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[14] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[15] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[16] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[17] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[18] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[19] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[20] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[21] = {1'b0, 1'b0, 1'b1, 1'b1};
    vectors[22] = {1'b0, 1'b0, 1'b1, 1'b1};
    vectors[23] = {1'b0, 1'b0, 1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B, C} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : NA3X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module NA4I1X1_test_OUT;

  NA4I1X1 instance0(.A(A), .B(B), .C(C), .D(D), .OUT(OUT));

  NA4I1X1_stim_OUT instance1(.A(A), .B(B), .C(C), .D(D), .OUT(OUT));

endmodule

module NA4I1X1_stim_OUT(A, B, C, D, OUT);

  output A;
  reg A;
  output B;
  reg B;
  output C;
  reg C;
  output D;
  reg D;
  input OUT;

  parameter NUM_INPUT_BITS = 4;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 4;

  parameter NUM_VECTORS = 32;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[1] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[2] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[3] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[4] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[5] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[6] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[7] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[8] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b1};
    vectors[9] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[10] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[11] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b1};
    vectors[12] = {1'b0, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[13] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[14] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[15] = {1'b0, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[16] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[17] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[18] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[19] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[20] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[21] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[22] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[23] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[24] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[25] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[26] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[27] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[28] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[29] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[30] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[31] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B, C, D} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : NA4I1X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module NA4I2X1_test_OUT;

  NA4I2X1 instance0(.A(A), .B(B), .C(C), .D(D), .OUT(OUT));

  NA4I2X1_stim_OUT instance1(.A(A), .B(B), .C(C), .D(D), .OUT(OUT));

endmodule

module NA4I2X1_stim_OUT(A, B, C, D, OUT);

  output A;
  reg A;
  output B;
  reg B;
  output C;
  reg C;
  output D;
  reg D;
  input OUT;

  parameter NUM_INPUT_BITS = 4;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 4;

  parameter NUM_VECTORS = 32;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[1] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[2] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[3] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[4] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[5] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[6] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[7] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[8] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[9] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[10] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[11] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[12] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[13] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[14] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[15] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[16] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[17] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[18] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[19] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[20] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[21] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[22] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[23] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[24] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[25] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[26] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[27] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[28] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[29] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[30] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[31] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B, C, D} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : NA4I2X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module NA4I3X1_test_OUT;

  NA4I3X1 instance0(.A(A), .B(B), .D(D), .C(C), .OUT(OUT));

  NA4I3X1_stim_OUT instance1(.A(A), .B(B), .D(D), .C(C), .OUT(OUT));

endmodule

module NA4I3X1_stim_OUT(A, B, D, C, OUT);

  output A;
  reg A;
  output B;
  reg B;
  output D;
  reg D;
  output C;
  reg C;
  input OUT;

  parameter NUM_INPUT_BITS = 4;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 4;

  parameter NUM_VECTORS = 32;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[1] = {1'b1, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[2] = {1'b1, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[3] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[4] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[5] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b1};
    vectors[6] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b1};
    vectors[7] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[8] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[9] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[10] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[11] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[12] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[13] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[14] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[15] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[16] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[17] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[18] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[19] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[20] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[21] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[22] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[23] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[24] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[25] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[26] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[27] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[28] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[29] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[30] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[31] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B, C, D} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : NA4I3X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module NA4X1_test_OUT;

  NA4X1 instance0(.B(B), .A(A), .C(C), .D(D), .OUT(OUT));

  NA4X1_stim_OUT instance1(.B(B), .A(A), .C(C), .D(D), .OUT(OUT));

endmodule

module NA4X1_stim_OUT(B, A, C, D, OUT);

  output B;
  reg B;
  output A;
  reg A;
  output C;
  reg C;
  output D;
  reg D;
  input OUT;

  parameter NUM_INPUT_BITS = 4;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 4;

  parameter NUM_VECTORS = 32;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[1] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[2] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[3] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[4] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[5] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[6] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[7] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[8] = {1'b1, 1'b1, 1'b0, 1'b1, 1'b1};
    vectors[9] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[10] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[11] = {1'b1, 1'b1, 1'b0, 1'b1, 1'b1};
    vectors[12] = {1'b1, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[13] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[14] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[15] = {1'b1, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[16] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[17] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[18] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[19] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[20] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[21] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[22] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[23] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[24] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[25] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[26] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[27] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[28] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[29] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[30] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[31] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B, C, D} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : NA4X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module NA5I1X1_test_OUT;

  NA5I1X1 instance0(.A(A), .B(B), .E(E), .C(C), .D(D), .OUT(OUT));

  NA5I1X1_stim_OUT instance1(.A(A), .B(B), .E(E), .C(C), .D(D), .OUT(OUT));

endmodule

module NA5I1X1_stim_OUT(A, B, E, C, D, OUT);

  output A;
  reg A;
  output B;
  reg B;
  output E;
  reg E;
  output C;
  reg C;
  output D;
  reg D;
  input OUT;

  parameter NUM_INPUT_BITS = 5;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 5;

  parameter NUM_VECTORS = 40;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[1] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[2] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[3] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[4] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[5] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[6] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[7] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[8] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[9] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[10] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[11] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[12] = {1'b0, 1'b1, 1'b1, 1'b0, 1'b1, 1'b1};
    vectors[13] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[14] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[15] = {1'b0, 1'b1, 1'b1, 1'b0, 1'b1, 1'b1};
    vectors[16] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[17] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[18] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[19] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[20] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[21] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[22] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[23] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[24] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[25] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[26] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[27] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[28] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[29] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[30] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[31] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[32] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[33] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[34] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[35] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[36] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[37] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[38] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[39] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B, C, D, E} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : NA5I1X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module NA5X1_test_OUT;

  NA5X1 instance0(.A(A), .B(B), .E(E), .C(C), .D(D), .OUT(OUT));

  NA5X1_stim_OUT instance1(.A(A), .B(B), .E(E), .C(C), .D(D), .OUT(OUT));

endmodule

module NA5X1_stim_OUT(A, B, E, C, D, OUT);

  output A;
  reg A;
  output B;
  reg B;
  output E;
  reg E;
  output C;
  reg C;
  output D;
  reg D;
  input OUT;

  parameter NUM_INPUT_BITS = 5;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 5;

  parameter NUM_VECTORS = 40;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[1] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[2] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[3] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[4] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[5] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[6] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[7] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[8] = {1'b1, 1'b1, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[9] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[10] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[11] = {1'b1, 1'b1, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[12] = {1'b1, 1'b1, 1'b1, 1'b0, 1'b1, 1'b1};
    vectors[13] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[14] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[15] = {1'b1, 1'b1, 1'b1, 1'b0, 1'b1, 1'b1};
    vectors[16] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[17] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[18] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[19] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[20] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[21] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[22] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[23] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[24] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[25] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[26] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[27] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[28] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[29] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[30] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[31] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[32] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[33] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[34] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[35] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[36] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[37] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[38] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[39] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B, C, D, E} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : NA5X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module NA6X1_test_OUT;

  NA6X1 instance0(.B(B), .A(A), .E(E), .D(D), .F(F), .C(C), .OUT(OUT));

  NA6X1_stim_OUT instance1(.B(B), .A(A), .E(E), .D(D), .F(F), .C(C), .OUT(OUT));

endmodule

module NA6X1_stim_OUT(B, A, E, D, F, C, OUT);

  output B;
  reg B;
  output A;
  reg A;
  output E;
  reg E;
  output D;
  reg D;
  output F;
  reg F;
  output C;
  reg C;
  input OUT;

  parameter NUM_INPUT_BITS = 6;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 6;

  parameter NUM_VECTORS = 48;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[1] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[2] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[3] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[4] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[5] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[6] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[7] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[8] = {1'b1, 1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[9] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[10] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[11] = {1'b1, 1'b1, 1'b0, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[12] = {1'b1, 1'b1, 1'b1, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[13] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[14] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[15] = {1'b1, 1'b1, 1'b1, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[16] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1, 1'b1};
    vectors[17] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[18] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[19] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1, 1'b1};
    vectors[20] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[21] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[22] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[23] = {1'b1, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[24] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[25] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[26] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[27] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[28] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[29] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[30] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[31] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[32] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[33] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[34] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[35] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[36] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[37] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[38] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[39] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[40] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[41] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[42] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[43] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[44] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[45] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[46] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[47] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B, C, D, E, F} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : NA6X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module NO2X1_test_OUT;

  NO2X1 instance0(.A(A), .B(B), .OUT(OUT));

  NO2X1_stim_OUT instance1(.A(A), .B(B), .OUT(OUT));

endmodule

module NO2X1_stim_OUT(A, B, OUT);

  output A;
  reg A;
  output B;
  reg B;
  input OUT;

  parameter NUM_INPUT_BITS = 2;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 2;

  parameter NUM_VECTORS = 16;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0, 1'b1};
    vectors[1] = {1'b1, 1'b0, 1'b0};
    vectors[2] = {1'b1, 1'b0, 1'b0};
    vectors[3] = {1'b0, 1'b0, 1'b1};
    vectors[4] = {1'b0, 1'b0, 1'b1};
    vectors[5] = {1'b0, 1'b1, 1'b0};
    vectors[6] = {1'b0, 1'b1, 1'b0};
    vectors[7] = {1'b0, 1'b0, 1'b1};
    vectors[8] = {1'b0, 1'b1, 1'b0};
    vectors[9] = {1'b1, 1'b1, 1'b0};
    vectors[10] = {1'b1, 1'b1, 1'b0};
    vectors[11] = {1'b0, 1'b1, 1'b0};
    vectors[12] = {1'b1, 1'b0, 1'b0};
    vectors[13] = {1'b1, 1'b1, 1'b0};
    vectors[14] = {1'b1, 1'b1, 1'b0};
    vectors[15] = {1'b1, 1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : NO2X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module NO3X1_test_OUT;

  NO3X1 instance0(.A(A), .B(B), .C(C), .OUT(OUT));

  NO3X1_stim_OUT instance1(.A(A), .B(B), .C(C), .OUT(OUT));

endmodule

module NO3X1_stim_OUT(A, B, C, OUT);

  output A;
  reg A;
  output B;
  reg B;
  output C;
  reg C;
  input OUT;

  parameter NUM_INPUT_BITS = 3;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 3;

  parameter NUM_VECTORS = 24;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[1] = {1'b1, 1'b0, 1'b0, 1'b0};
    vectors[2] = {1'b1, 1'b0, 1'b0, 1'b0};
    vectors[3] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[4] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[5] = {1'b0, 1'b1, 1'b0, 1'b0};
    vectors[6] = {1'b0, 1'b1, 1'b0, 1'b0};
    vectors[7] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[8] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[9] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[10] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[11] = {1'b0, 1'b0, 1'b0, 1'b1};
    vectors[12] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[13] = {1'b1, 1'b0, 1'b1, 1'b0};
    vectors[14] = {1'b1, 1'b0, 1'b1, 1'b0};
    vectors[15] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[16] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[17] = {1'b0, 1'b1, 1'b1, 1'b0};
    vectors[18] = {1'b0, 1'b1, 1'b1, 1'b0};
    vectors[19] = {1'b0, 1'b0, 1'b1, 1'b0};
    vectors[20] = {1'b0, 1'b1, 1'b0, 1'b0};
    vectors[21] = {1'b0, 1'b1, 1'b1, 1'b0};
    vectors[22] = {1'b0, 1'b1, 1'b1, 1'b0};
    vectors[23] = {1'b0, 1'b1, 1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B, C} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : NO3X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module NO4X1_test_OUT;

  NO4X1 instance0(.B(B), .A(A), .C(C), .D(D), .OUT(OUT));

  NO4X1_stim_OUT instance1(.B(B), .A(A), .C(C), .D(D), .OUT(OUT));

endmodule

module NO4X1_stim_OUT(B, A, C, D, OUT);

  output B;
  reg B;
  output A;
  reg A;
  output C;
  reg C;
  output D;
  reg D;
  input OUT;

  parameter NUM_INPUT_BITS = 4;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 4;

  parameter NUM_VECTORS = 32;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[1] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[2] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[3] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[4] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[5] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[6] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[7] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[8] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[9] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[10] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[11] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[12] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[13] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[14] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[15] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[16] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[17] = {1'b1, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[18] = {1'b1, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[19] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[20] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[21] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[22] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[23] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[24] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[25] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[26] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[27] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[28] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[29] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[30] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[31] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B, C, D} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : NO4X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module NO5X1_test_OUT;

  NO5X1 instance0(.E(E), .B(B), .A(A), .C(C), .D(D), .OUT(OUT));

  NO5X1_stim_OUT instance1(.E(E), .B(B), .A(A), .C(C), .D(D), .OUT(OUT));

endmodule

module NO5X1_stim_OUT(E, B, A, C, D, OUT);

  output E;
  reg E;
  output B;
  reg B;
  output A;
  reg A;
  output C;
  reg C;
  output D;
  reg D;
  input OUT;

  parameter NUM_INPUT_BITS = 5;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 5;

  parameter NUM_VECTORS = 40;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[1] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[2] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[3] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[4] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[5] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[6] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[7] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[8] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[9] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[10] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[11] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[12] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[13] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[14] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[15] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[16] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[17] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[18] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[19] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[20] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[21] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[22] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[23] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[24] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[25] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[26] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[27] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[28] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[29] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[30] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[31] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[32] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[33] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[34] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[35] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[36] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[37] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[38] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[39] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B, C, D, E} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : NO5X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module NO6X1_test_OUT;

  NO6X1 instance0(.F(F), .D(D), .C(C), .A(A), .E(E), .B(B), .OUT(OUT));

  NO6X1_stim_OUT instance1(.F(F), .D(D), .C(C), .A(A), .E(E), .B(B), .OUT(OUT));

endmodule

module NO6X1_stim_OUT(F, D, C, A, E, B, OUT);

  output F;
  reg F;
  output D;
  reg D;
  output C;
  reg C;
  output A;
  reg A;
  output E;
  reg E;
  output B;
  reg B;
  input OUT;

  parameter NUM_INPUT_BITS = 6;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 6;

  parameter NUM_VECTORS = 48;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[1] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[2] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[3] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[4] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[5] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[6] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[7] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[8] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[9] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[10] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[11] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[12] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[13] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[14] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[15] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[16] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[17] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[18] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[19] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[20] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[21] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[22] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[23] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[24] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[25] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[26] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[27] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[28] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[29] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[30] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[31] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[32] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[33] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[34] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[35] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[36] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[37] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[38] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[39] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[40] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[41] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[42] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[43] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[44] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[45] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[46] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[47] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B, C, D, E, F} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : NO6X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module OA211X1_test_OUT;

  OA211X1 instance0(.B(B), .A(A), .D(D), .C(C), .OUT(OUT));

  OA211X1_stim_OUT instance1(.B(B), .A(A), .D(D), .C(C), .OUT(OUT));

endmodule

module OA211X1_stim_OUT(B, A, D, C, OUT);

  output B;
  reg B;
  output A;
  reg A;
  output D;
  reg D;
  output C;
  reg C;
  input OUT;

  parameter NUM_INPUT_BITS = 4;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 4;

  parameter NUM_VECTORS = 32;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[1] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[2] = {1'b1, 1'b0, 1'b1, 1'b1, 1'b1};
    vectors[3] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[4] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[5] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[6] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[7] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0};
    vectors[8] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[9] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[10] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[11] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[12] = {1'b0, 1'b1, 1'b1, 1'b0, 1'b0};
    vectors[13] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[14] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1};
    vectors[15] = {1'b0, 1'b1, 1'b1, 1'b0, 1'b0};
    vectors[16] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[17] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[18] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[19] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[20] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[21] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[22] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0};
    vectors[23] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[24] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[25] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[26] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0};
    vectors[27] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[28] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};
    vectors[29] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[30] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[31] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B, C, D} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : OA211X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module ON32X1_test_OUT;

  ON32X1 instance0(.A(A), .B(B), .C(C), .D(D), .E(E), .OUT(OUT));

  ON32X1_stim_OUT instance1(.A(A), .B(B), .C(C), .D(D), .E(E), .OUT(OUT));

endmodule

module ON32X1_stim_OUT(A, B, C, D, E, OUT);

  output A;
  reg A;
  output B;
  reg B;
  output C;
  reg C;
  output D;
  reg D;
  output E;
  reg E;
  input OUT;

  parameter NUM_INPUT_BITS = 5;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 5;

  parameter NUM_VECTORS = 40;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[1] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[2] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[3] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[4] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[5] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[6] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[7] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[8] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[9] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[10] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[11] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[12] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[13] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b0};
    vectors[14] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b0};
    vectors[15] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[16] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[17] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[18] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b1, 1'b0};
    vectors[19] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[20] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[21] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[22] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[23] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[24] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[25] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[26] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[27] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[28] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[29] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[30] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[31] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[32] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[33] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[34] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[35] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[36] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[37] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[38] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b1};
    vectors[39] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B, C, D, E} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : ON32X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module OR2X1_test_OUT;

  OR2X1 instance0(.A(A), .B(B), .OUT(OUT));

  OR2X1_stim_OUT instance1(.A(A), .B(B), .OUT(OUT));

endmodule

module OR2X1_stim_OUT(A, B, OUT);

  output A;
  reg A;
  output B;
  reg B;
  input OUT;

  parameter NUM_INPUT_BITS = 2;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 2;

  parameter NUM_VECTORS = 16;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b0, 1'b1};
    vectors[2] = {1'b1, 1'b0, 1'b1};
    vectors[3] = {1'b0, 1'b0, 1'b0};
    vectors[4] = {1'b0, 1'b0, 1'b0};
    vectors[5] = {1'b0, 1'b1, 1'b1};
    vectors[6] = {1'b0, 1'b1, 1'b1};
    vectors[7] = {1'b0, 1'b0, 1'b0};
    vectors[8] = {1'b0, 1'b1, 1'b1};
    vectors[9] = {1'b1, 1'b1, 1'b1};
    vectors[10] = {1'b1, 1'b1, 1'b1};
    vectors[11] = {1'b0, 1'b1, 1'b1};
    vectors[12] = {1'b1, 1'b0, 1'b1};
    vectors[13] = {1'b1, 1'b1, 1'b1};
    vectors[14] = {1'b1, 1'b1, 1'b1};
    vectors[15] = {1'b1, 1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : OR2X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module OR3X1_test_OUT;

  OR3X1 instance0(.A(A), .B(B), .C(C), .OUT(OUT));

  OR3X1_stim_OUT instance1(.A(A), .B(B), .C(C), .OUT(OUT));

endmodule

module OR3X1_stim_OUT(A, B, C, OUT);

  output A;
  reg A;
  output B;
  reg B;
  output C;
  reg C;
  input OUT;

  parameter NUM_INPUT_BITS = 3;
  parameter NUM_OUTPUT_BITS = 1;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_OUT_LOCATION = 3;

  parameter NUM_VECTORS = 24;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[1] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[2] = {1'b1, 1'b0, 1'b0, 1'b1};
    vectors[3] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[4] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[5] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[6] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[7] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[8] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[9] = {1'b0, 1'b0, 1'b1, 1'b1};
    vectors[10] = {1'b0, 1'b0, 1'b1, 1'b1};
    vectors[11] = {1'b0, 1'b0, 1'b0, 1'b0};
    vectors[12] = {1'b0, 1'b0, 1'b1, 1'b1};
    vectors[13] = {1'b1, 1'b0, 1'b1, 1'b1};
    vectors[14] = {1'b1, 1'b0, 1'b1, 1'b1};
    vectors[15] = {1'b0, 1'b0, 1'b1, 1'b1};
    vectors[16] = {1'b0, 1'b0, 1'b1, 1'b1};
    vectors[17] = {1'b0, 1'b1, 1'b1, 1'b1};
    vectors[18] = {1'b0, 1'b1, 1'b1, 1'b1};
    vectors[19] = {1'b0, 1'b0, 1'b1, 1'b1};
    vectors[20] = {1'b0, 1'b1, 1'b0, 1'b1};
    vectors[21] = {1'b0, 1'b1, 1'b1, 1'b1};
    vectors[22] = {1'b0, 1'b1, 1'b1, 1'b1};
    vectors[23] = {1'b0, 1'b1, 1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {A, B, C} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_OUT_LOCATION] !== OUT && ivector[OUTPUT_OUT_LOCATION] !== 1'bx)
        $display("testbench ERROR : OR3X1:OUT output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_OUT_LOCATION], OUT);
    end

  end

endmodule

module SDFRX1_test_Q_QN;

  SDFRX1 instance0(.ICLK(ICLK), .SD(SD), .SE(SE), .D(D), .Q(Q), .QN(QN));

  SDFRX1_stim_Q_QN instance1(.ICLK(ICLK), .SD(SD), .SE(SE), .D(D), .Q(Q), .QN(QN));

endmodule

module SDFRX1_stim_Q_QN(ICLK, SD, SE, D, Q, QN);

  output ICLK;
  reg ICLK;
  output SD;
  reg SD;
  output SE;
  reg SE;
  output D;
  reg D;
  input Q;
  input QN;

  parameter NUM_INPUT_BITS = 4;
  parameter NUM_OUTPUT_BITS = 2;
  parameter NUM_TOTAL_BITS = NUM_INPUT_BITS + NUM_OUTPUT_BITS;

  parameter OUTPUT_Q_LOCATION = 4;
  parameter OUTPUT_QN_LOCATION = 5;

  parameter NUM_VECTORS = 57;
  reg [0:NUM_TOTAL_BITS-1] vectors [0:NUM_VECTORS-1];
  reg [0:NUM_TOTAL_BITS-1] ivector;
  integer ctr;

  initial begin

    vectors[0] = {1'b0, 1'b0, 1'b0, 1'b1, 1'bx, 1'bx};
    vectors[1] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[2] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[3] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[4] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[5] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[6] = {1'b0, 1'b0, 1'b0, 1'b1, 1'bx, 1'bx};
    vectors[7] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[8] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[9] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[10] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[11] = {1'b0, 1'b0, 1'b0, 1'b1, 1'bx, 1'bx};
    vectors[12] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[13] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[14] = {1'b0, 1'b0, 1'b1, 1'b1, 1'b0, 1'b1};
    vectors[15] = {1'b0, 1'b1, 1'b1, 1'b1, 1'b1, 1'b0};
    vectors[16] = {1'b1, 1'b0, 1'b0, 1'b0, 1'bx, 1'bx};
    vectors[17] = {1'b1, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[18] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[19] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[20] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[21] = {1'b1, 1'b0, 1'b0, 1'b0, 1'bx, 1'bx};
    vectors[22] = {1'b1, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[23] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[24] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[25] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[26] = {1'b0, 1'b0, 1'b0, 1'b0, 1'bx, 1'bx};
    vectors[27] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[28] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[29] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[30] = {1'b1, 1'b0, 1'b0, 1'b0, 1'bx, 1'bx};
    vectors[31] = {1'b1, 1'b1, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[32] = {1'b1, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[33] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0};
    vectors[34] = {1'b0, 1'b0, 1'b0, 1'b0, 1'bx, 1'bx};
    vectors[35] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[36] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[37] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[38] = {1'b0, 1'b0, 1'b0, 1'b0, 1'bx, 1'bx};
    vectors[39] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[40] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[41] = {1'b0, 1'b0, 1'b0, 1'b0, 1'bx, 1'bx};
    vectors[42] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[43] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[44] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[45] = {1'b0, 1'b0, 1'b1, 1'b0, 1'bx, 1'bx};
    vectors[46] = {1'b0, 1'b1, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[47] = {1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b1};
    vectors[48] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[49] = {1'b0, 1'b0, 1'b0, 1'b0, 1'bx, 1'bx};
    vectors[50] = {1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[51] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};
    vectors[52] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[53] = {1'b0, 1'b0, 1'b0, 1'b1, 1'bx, 1'bx};
    vectors[54] = {1'b0, 1'b1, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[55] = {1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b1};
    vectors[56] = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1};

    for (ctr=0; ctr < NUM_VECTORS; ctr=ctr+1)
    begin
      ivector = vectors[ctr];
      {D, ICLK, SD, SE} = ivector[0:NUM_INPUT_BITS-1];
      #20;  
      if(ivector[OUTPUT_Q_LOCATION] !== Q && ivector[OUTPUT_Q_LOCATION] !== 1'bx)
        $display("testbench ERROR : SDFRX1:Q output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_Q_LOCATION], Q);
      if(ivector[OUTPUT_QN_LOCATION] !== QN && ivector[OUTPUT_QN_LOCATION] !== 1'bx)
        $display("testbench ERROR : SDFRX1:QN output mismatch at vector no. %d, %b != %b",
                 ctr, ivector[OUTPUT_QN_LOCATION], QN);
    end

  end

endmodule
