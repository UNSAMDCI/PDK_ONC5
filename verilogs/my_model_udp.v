//****************************************************************************//
// Verilog models generated by SiliconSmart L-2016.06-SP1-1 build date: Sep 28, 2016 18:12:52. (SMSC-2) //
// Siliconsmart Path: /opt/synopsys/silicon_smart/L-2016.06-SP1-1/linux64/bin/siliconsmart //
// Host Name: unsam.pc, User Name: digital, PID: 18100                       //
// Directory: /home/digital/siliconSmart                                      //
//                                                                            //
// File generated on Thu Jul 13 19:18:08 -03 2017. (SMSC-3)                   //
//****************************************************************************//


`timescale 1ns/1ps

// udp_data_begin


`celldefine
module AN21X1_func( OUT, A, B, C );
input A, B, C;
output OUT;

	wire A_inv_for_AN21X1;

	not MGM_BG_0( A_inv_for_AN21X1, A );

	wire C_inv_for_AN21X1;

	not MGM_BG_1( C_inv_for_AN21X1, C );

	wire OUT_row1;

	and MGM_BG_2( OUT_row1, A_inv_for_AN21X1, C_inv_for_AN21X1 );

	wire B_inv_for_AN21X1;

	not MGM_BG_3( B_inv_for_AN21X1, B );

	wire OUT_row2;

	and MGM_BG_4( OUT_row2, B_inv_for_AN21X1, C_inv_for_AN21X1 );

	or MGM_BG_5( OUT, OUT_row1, OUT_row2 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module AND2X1_func( OUT, A, B );
input A, B;
output OUT;

	and MGM_BG_0( OUT, A, B );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module AND3X1_func( OUT, A, B, C );
input A, B, C;
output OUT;

	and MGM_BG_0( OUT, A, B, C );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module AND4X1_func( OUT, C, D, B, A );
input A, B, C, D;
output OUT;

	and MGM_BG_0( OUT, A, B, C, D );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module AND5X1_func( OUT, C, D, E, B, A );
input A, B, C, D, E;
output OUT;

	and MGM_BG_0( OUT, A, B, C, D, E );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module AND6X1_func( OUT, C, D, F, E, B, A );
input A, B, C, D, E, F;
output OUT;

	and MGM_BG_0( OUT, A, B, C, D, E, F );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module AO21X1_func( OUT, B, A, C );
input A, B, C;
output OUT;

	wire OUT_row1;

	and MGM_BG_0( OUT_row1, A, B );

	or MGM_BG_1( OUT, OUT_row1, C );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module AO222X1_func( OUT, E, F, D, C, B, A );
input A, B, C, D, E, F;
output OUT;

	wire OUT_row1;

	and MGM_BG_0( OUT_row1, A, B );

	wire OUT_row2;

	and MGM_BG_1( OUT_row2, C, D );

	wire OUT_row3;

	and MGM_BG_2( OUT_row3, E, F );

	or MGM_BG_3( OUT, OUT_row1, OUT_row2, OUT_row3 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module AO22X1_func( OUT, C, D, B, A );
input A, B, C, D;
output OUT;

	wire OUT_row1;

	and MGM_BG_0( OUT_row1, A, B );

	wire OUT_row2;

	and MGM_BG_1( OUT_row2, C, D );

	or MGM_BG_2( OUT, OUT_row1, OUT_row2 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module AO31X1_func( OUT, A, B, C, D );
input A, B, C, D;
output OUT;

	wire OUT_row1;

	and MGM_BG_0( OUT_row1, A, B, C );

	or MGM_BG_1( OUT, OUT_row1, D );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module AO32X1_func( OUT, A, B, C, E, D );
input A, B, C, D, E;
output OUT;

	wire OUT_row1;

	and MGM_BG_0( OUT_row1, A, B, C );

	wire OUT_row2;

	and MGM_BG_1( OUT_row2, D, E );

	or MGM_BG_2( OUT, OUT_row1, OUT_row2 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module BUF1X4_func( OUT, IN );
input IN;
output OUT;

	buf MGM_BG_0( OUT, IN );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module BUF2X8_func( OUT, IN );
input IN;
output OUT;

	buf MGM_BG_0( OUT, IN );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module BUX1_func( OUT, IN );
input IN;
output OUT;

	buf MGM_BG_0( OUT, IN );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module BUX2_func( OUT, IN );
input IN;
output OUT;

	buf MGM_BG_0( OUT, IN );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module BUX3_func( OUT, IN );
input IN;
output OUT;

	buf MGM_BG_0( OUT, IN );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module BUX4_func( OUT, IN );
input IN;
output OUT;

	buf MGM_BG_0( OUT, IN );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module BUX6_func( OUT, IN );
input IN;
output OUT;

	buf MGM_BG_0( OUT, IN );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module BUX8_func( Z, IN );
input IN;
output Z;

	buf MGM_BG_0( Z, IN );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


primitive UDP_op_cond_typ_my_model_MGM_IQ_FF_UDP( Q, C, P, CK, D );
output Q;
reg Q;
input C, P, CK, D; 
table 
//C  P  CK  D   : Q : Q 
  0  0  n  ?  :  ?  :  -;
  ?  0  r  0  :  ?  :  0;
  ?  0  p  0  :  0  :  0;
  1  0  ?  ?  :  ?  :  0;
  0  ?  r  1  :  ?  :  1;
  0  ?  p  1  :  1  :  1;
  0  1  ?  ?  :  ?  :  1;
  0  0  ?  *  :  ?  :  -;
  0  n  ?  ?  :  ?  :  -;
  n  0  ?  ?  :  ?  :  -;
  0  p  ?  ?  :  ?  :  -;
                
endtable
endprimitive


primitive UDP_op_cond_typ_my_model_MGM_IQN_FF_UDP( Q, C, P, CK, D );
output Q;
reg Q;
input C, P, CK, D; 
table 
//C  P  CK  D   : Q : Q 
  0  0  n  ?  :  ?  :  -;
  ?  0  r  0  :  ?  :  1;
  ?  0  p  0  :  1  :  1;
  1  0  ?  ?  :  ?  :  1;
  0  ?  r  1  :  ?  :  0;
  0  ?  p  1  :  0  :  0;
  0  1  ?  ?  :  ?  :  0;
  0  0  ?  *  :  ?  :  -;
  0  n  ?  ?  :  ?  :  -;
  n  0  ?  ?  :  ?  :  -;
  0  p  ?  ?  :  ?  :  -;
                
endtable
endprimitive


`celldefine
module DFFX1_func( QN, Q, D, ICLK );
input D, ICLK;
output Q, QN;

	not MGM_BG_0( MGM_CLK0, ICLK );

	UDP_op_cond_typ_my_model_MGM_IQ_FF_UDP( IQ1, 1'b0, 1'b0, MGM_CLK0, D );

	UDP_op_cond_typ_my_model_MGM_IQN_FF_UDP( IQN1, 1'b0, 1'b0, MGM_CLK0, D );

	not MGM_BG_1( Q, IQN1 );

	not MGM_BG_2( QN, IQ1 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module DFRQX1_func( Q, ICLK, D );
input D, ICLK;
output Q;

	not MGM_BG_0( MGM_D0, D );

	UDP_op_cond_typ_my_model_MGM_IQ_FF_UDP( IQ1, 1'b0, 1'b0, ICLK, MGM_D0 );

	not MGM_BG_1( Q, IQ1 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


primitive UDP_op_cond_typ_my_model_MGM_H_IQ_FF_UDP( Q, C, P, CK, D );
output Q;
reg Q;
input C, P, CK, D; 
table 
//C  P  CK  D   : Q : Q 
  0  0  n  ?  :  ?  :  -;
  ?  0  r  0  :  ?  :  0;
  ?  0  p  0  :  0  :  0;
  1  0  ?  ?  :  ?  :  0;
  0  ?  r  1  :  ?  :  1;
  0  ?  p  1  :  1  :  1;
  ?  1  ?  ?  :  ?  :  1;
  0  0  ?  *  :  ?  :  -;
  0  n  ?  ?  :  ?  :  -;
  n  0  ?  ?  :  ?  :  -;
  0  p  ?  ?  :  ?  :  -;
                
endtable
endprimitive


primitive UDP_op_cond_typ_my_model_MGM_H_IQN_FF_UDP( Q, C, P, CK, D );
output Q;
reg Q;
input C, P, CK, D; 
table 
//C  P  CK  D   : Q : Q 
  0  0  n  ?  :  ?  :  -;
  ?  0  r  0  :  ?  :  1;
  ?  0  p  0  :  1  :  1;
  1  ?  ?  ?  :  ?  :  1;
  0  ?  r  1  :  ?  :  0;
  0  ?  p  1  :  0  :  0;
  0  1  ?  ?  :  ?  :  0;
  0  0  ?  *  :  ?  :  -;
  0  n  ?  ?  :  ?  :  -;
  n  0  ?  ?  :  ?  :  -;
  0  p  ?  ?  :  ?  :  -;
                
endtable
endprimitive


`celldefine
module DFRRSX1_func( Q, QN, ICLK, D, RN, SN );
input D, ICLK, RN, SN;
output Q, QN;

	not MGM_BG_0( MGM_P0, RN );

	not MGM_BG_1( MGM_C0, SN );

	not MGM_BG_2( MGM_D0, D );

	UDP_op_cond_typ_my_model_MGM_H_IQ_FF_UDP( IQ1, MGM_C0, MGM_P0, ICLK, MGM_D0 );

	UDP_op_cond_typ_my_model_MGM_H_IQN_FF_UDP( IQN1, MGM_C0, MGM_P0, ICLK, MGM_D0 );

	not MGM_BG_3( Q, IQ1 );

	not MGM_BG_4( QN, IQN1 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module DFRRX1_func( QN, Q, ICLK, D, RN );
input D, ICLK, RN;
output Q, QN;

	not MGM_BG_0( MGM_C0, RN );

	UDP_op_cond_typ_my_model_MGM_IQ_FF_UDP( IQ1, MGM_C0, 1'b0, ICLK, D );

	UDP_op_cond_typ_my_model_MGM_IQN_FF_UDP( IQN1, MGM_C0, 1'b0, ICLK, D );

	not MGM_BG_1( Q, IQN1 );

	not MGM_BG_2( QN, IQ1 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module DFRX1_func( Q, QN, D, ICLK );
input D, ICLK;
output Q, QN;

	not MGM_BG_0( MGM_D0, D );

	UDP_op_cond_typ_my_model_MGM_IQ_FF_UDP( IQ1, 1'b0, 1'b0, ICLK, MGM_D0 );

	UDP_op_cond_typ_my_model_MGM_IQN_FF_UDP( IQN1, 1'b0, 1'b0, ICLK, MGM_D0 );

	not MGM_BG_1( Q, IQ1 );

	not MGM_BG_2( QN, IQN1 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


primitive UDP_op_cond_typ_my_model_MGM_IQ_LATCH_UDP( Q, C, P, CK, D );
output Q;
reg Q;
input C, P, CK, D; 
table 
//C  P  CK  D   : Q : Q 
  0  0  0  *  :  ?  :  -;
  0  0  (?0)  ?  :  ?  :  -;
  0  (?0)  0  ?  :  ?  :  -;
  (?0)  0  0  ?  :  ?  :  -;
  ?  0  1  0  :  ?  :  0;
  ?  0  ?  (?0)  :  0  :  0;
  ?  (?0)  ?  0  :  0  :  0;
  1  0  ?  ?  :  ?  :  0;
  0  ?  1  1  :  ?  :  1;
  0  ?  ?  (?1)  :  1  :  1;
  (?0)  ?  ?  1  :  1  :  1;
  0  1  ?  ?  :  ?  :  1;
                
endtable
endprimitive


primitive UDP_op_cond_typ_my_model_MGM_IQN_LATCH_UDP( Q, C, P, CK, D );
output Q;
reg Q;
input C, P, CK, D; 
table 
//C  P  CK  D   : Q : Q 
  0  0  0  *  :  ?  :  -;
  0  0  (?0)  ?  :  ?  :  -;
  0  (?0)  0  ?  :  ?  :  -;
  (?0)  0  0  ?  :  ?  :  -;
  ?  0  1  0  :  ?  :  1;
  ?  0  ?  (?0)  :  1  :  1;
  ?  (?0)  ?  0  :  1  :  1;
  1  0  ?  ?  :  ?  :  1;
  0  ?  1  1  :  ?  :  0;
  0  ?  ?  (?1)  :  0  :  0;
  (?0)  ?  ?  1  :  0  :  0;
  0  1  ?  ?  :  ?  :  0;
                
endtable
endprimitive


`celldefine
module DLHLX1_func( Q, QN, G, D );
input D, G;
output Q, QN;

	not MGM_BG_0( MGM_D0, D );

	UDP_op_cond_typ_my_model_MGM_IQ_LATCH_UDP( IQ1, 1'b0, 1'b0, G, MGM_D0 );

	UDP_op_cond_typ_my_model_MGM_IQN_LATCH_UDP( IQN1, 1'b0, 1'b0, G, MGM_D0 );

	not MGM_BG_1( Q, IQ1 );

	not MGM_BG_2( QN, IQN1 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module DLHQLX1_func( Q, G, D );
input D, G;
output Q;

	not MGM_BG_0( MGM_D0, D );

	UDP_op_cond_typ_my_model_MGM_IQ_LATCH_UDP( IQ1, 1'b0, 1'b0, G, MGM_D0 );

	not MGM_BG_1( Q, IQ1 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module DLHRLX1_func( Q, QN, D, G, R );
input D, G, R;
output Q, QN;

	not MGM_BG_0( MGM_P0, R );

	not MGM_BG_1( MGM_D0, D );

	UDP_op_cond_typ_my_model_MGM_IQ_LATCH_UDP( IQ1, 1'b0, MGM_P0, G, MGM_D0 );

	UDP_op_cond_typ_my_model_MGM_IQN_LATCH_UDP( IQN1, 1'b0, MGM_P0, G, MGM_D0 );

	not MGM_BG_2( Q, IQ1 );

	not MGM_BG_3( QN, IQN1 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module DLHRQLX1_func( Q, G, D, R );
input D, G, R;
output Q;

	not MGM_BG_0( MGM_P0, R );

	not MGM_BG_1( MGM_D0, D );

	UDP_op_cond_typ_my_model_MGM_IQ_LATCH_UDP( IQ1, 1'b0, MGM_P0, G, MGM_D0 );

	not MGM_BG_2( Q, IQ1 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module DLY1LX1_func( Q, D );
input D;
output Q;

	buf MGM_BG_0( Q, D );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module DLY1p6LX1_func( Q, D );
input D;
output Q;

	buf MGM_BG_0( Q, D );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module DLY2LX1_func( Q, D );
input D;
output Q;

	buf MGM_BG_0( Q, D );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module DLY4LX1_func( Q, D );
input D;
output Q;

	buf MGM_BG_0( Q, D );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module DLY8LX1_func( Q, D );
input D;
output Q;

	buf MGM_BG_0( Q, D );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module EO2X1_func( Z, A, B );
input A, B;
output Z;

	wire B_inv_for_EO2X1;

	not MGM_BG_0( B_inv_for_EO2X1, B );

	wire Z_row1;

	and MGM_BG_1( Z_row1, B_inv_for_EO2X1, A );

	wire A_inv_for_EO2X1;

	not MGM_BG_2( A_inv_for_EO2X1, A );

	wire Z_row2;

	and MGM_BG_3( Z_row2, A_inv_for_EO2X1, B );

	or MGM_BG_4( Z, Z_row1, Z_row2 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module FAX1_func( CO, S, A, B, CI );
input A, B, CI;
output CO, S;

	wire CO_row1;

	and MGM_BG_0( CO_row1, A, B );

	wire CO_row2;

	and MGM_BG_1( CO_row2, A, CI );

	wire CO_row3;

	and MGM_BG_2( CO_row3, B, CI );

	or MGM_BG_3( CO, CO_row1, CO_row2, CO_row3 );

	wire S_row1;

	and MGM_BG_4( S_row1, A, B, CI );

	wire B_inv_for_FAX1;

	not MGM_BG_5( B_inv_for_FAX1, B );

	wire CI_inv_for_FAX1;

	not MGM_BG_6( CI_inv_for_FAX1, CI );

	wire S_row2;

	and MGM_BG_7( S_row2, B_inv_for_FAX1, CI_inv_for_FAX1, A );

	wire A_inv_for_FAX1;

	not MGM_BG_8( A_inv_for_FAX1, A );

	wire S_row3;

	and MGM_BG_9( S_row3, A_inv_for_FAX1, CI_inv_for_FAX1, B );

	wire S_row4;

	and MGM_BG_10( S_row4, A_inv_for_FAX1, B_inv_for_FAX1, CI );

	or MGM_BG_11( S, S_row1, S_row2, S_row3, S_row4 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module FEEDCAP2L_func(  );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module HAX1_func( CO, S, B, A );
input A, B;
output CO, S;

	and MGM_BG_0( CO, A, B );

	wire B_inv_for_HAX1;

	not MGM_BG_1( B_inv_for_HAX1, B );

	wire S_row1;

	and MGM_BG_2( S_row1, B_inv_for_HAX1, A );

	wire A_inv_for_HAX1;

	not MGM_BG_3( A_inv_for_HAX1, A );

	wire S_row2;

	and MGM_BG_4( S_row2, A_inv_for_HAX1, B );

	or MGM_BG_5( S, S_row1, S_row2 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module INX1_func( OUT, IN );
input IN;
output OUT;

	not MGM_BG_0( OUT, IN );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module INX16_func( OUT, IN );
input IN;
output OUT;

	not MGM_BG_0( OUT, IN );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module INX2_func( OUT, IN );
input IN;
output OUT;

	not MGM_BG_0( OUT, IN );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module INX32_func( OUT, IN );
input IN;
output OUT;

	not MGM_BG_0( OUT, IN );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module INX4_func( OUT, IN );
input IN;
output OUT;

	not MGM_BG_0( OUT, IN );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module INX6_func( OUT, IN );
input IN;
output OUT;

	not MGM_BG_0( OUT, IN );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module INX8_func( OUT, IN );
input IN;
output OUT;

	not MGM_BG_0( OUT, IN );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module LGCPX1_func( GCLK, E, CLK );
input CLK, E;
output GCLK;

	not MGM_BG_0( MGM_EN0, CLK );

	UDP_op_cond_typ_my_model_MGM_IQ_LATCH_UDP( IQ2, 1'b0, 1'b0, MGM_EN0, E );

	and MGM_BG_1( GCLK, CLK, IQ2 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module LGCPX2_func( GCLK, E, CLK );
input CLK, E;
output GCLK;

	not MGM_BG_0( MGM_EN0, CLK );

	UDP_op_cond_typ_my_model_MGM_IQ_LATCH_UDP( IQ2, 1'b0, 1'b0, MGM_EN0, E );

	and MGM_BG_1( GCLK, CLK, IQ2 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module LGCPX3_func( GCLK, CLK, E );
input CLK, E;
output GCLK;

	not MGM_BG_0( MGM_EN0, CLK );

	UDP_op_cond_typ_my_model_MGM_IQ_LATCH_UDP( IQ2, 1'b0, 1'b0, MGM_EN0, E );

	and MGM_BG_1( GCLK, CLK, IQ2 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module LOGIC0_func( Q );
output Q;

	assign Q = 1'b0;

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module LOGIC1_func( Q );
output Q;

	assign Q = 1'b1;

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module LSGCPX1_func( GCLK, SE, E, CLK );
input CLK, E, SE;
output GCLK;

	not MGM_BG_0( MGM_EN0, CLK );

	or MGM_BG_1( MGM_D0, E, SE );

	UDP_op_cond_typ_my_model_MGM_IQ_LATCH_UDP( IQ2, 1'b0, 1'b0, MGM_EN0, MGM_D0 );

	and MGM_BG_2( GCLK, CLK, IQ2 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module LSGCPX2_func( GCLK, SE, E, CLK );
input CLK, E, SE;
output GCLK;

	not MGM_BG_0( MGM_EN0, CLK );

	or MGM_BG_1( MGM_D0, E, SE );

	UDP_op_cond_typ_my_model_MGM_IQ_LATCH_UDP( IQ2, 1'b0, 1'b0, MGM_EN0, MGM_D0 );

	and MGM_BG_2( GCLK, CLK, IQ2 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module LSGCPX3_func( GCLK, CLK, E, SE );
input CLK, E, SE;
output GCLK;

	not MGM_BG_0( MGM_EN0, CLK );

	or MGM_BG_1( MGM_D0, E, SE );

	UDP_op_cond_typ_my_model_MGM_IQ_LATCH_UDP( IQ2, 1'b0, 1'b0, MGM_EN0, MGM_D0 );

	and MGM_BG_2( GCLK, CLK, IQ2 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module LSOGCPX1_func( CGOBS, GCLK, SE, E, CLK );
input CLK, E, SE;
output CGOBS, GCLK;

	not MGM_BG_0( MGM_EN0, CLK );

	not MGM_BG_1( MGM_D0, E );

	UDP_op_cond_typ_my_model_MGM_IQ_LATCH_UDP( IQ1, 1'b0, 1'b0, MGM_EN0, MGM_D0 );

	UDP_op_cond_typ_my_model_MGM_IQN_LATCH_UDP( IQN1, 1'b0, 1'b0, MGM_EN0, MGM_D0 );

	not MGM_BG_2( CGOBS, IQ1 );

	wire GCLK_row1;

	and MGM_BG_3( GCLK_row1, CLK, IQN1 );

	wire GCLK_row2;

	and MGM_BG_4( GCLK_row2, CLK, SE );

	or MGM_BG_5( GCLK, GCLK_row1, GCLK_row2 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module LSOGCPX2_func( CGOBS, GCLK, SE, E, CLK );
input CLK, E, SE;
output CGOBS, GCLK;

	not MGM_BG_0( MGM_EN0, CLK );

	not MGM_BG_1( MGM_D0, E );

	UDP_op_cond_typ_my_model_MGM_IQ_LATCH_UDP( IQ1, 1'b0, 1'b0, MGM_EN0, MGM_D0 );

	UDP_op_cond_typ_my_model_MGM_IQN_LATCH_UDP( IQN1, 1'b0, 1'b0, MGM_EN0, MGM_D0 );

	not MGM_BG_2( CGOBS, IQ1 );

	wire GCLK_row1;

	and MGM_BG_3( GCLK_row1, CLK, IQN1 );

	wire GCLK_row2;

	and MGM_BG_4( GCLK_row2, CLK, SE );

	or MGM_BG_5( GCLK, GCLK_row1, GCLK_row2 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module LSOGCPX3_func( CGOBS, GCLK, SE, E, CLK );
input CLK, E, SE;
output CGOBS, GCLK;

	not MGM_BG_0( MGM_EN0, CLK );

	not MGM_BG_1( MGM_D0, E );

	UDP_op_cond_typ_my_model_MGM_IQ_LATCH_UDP( IQ1, 1'b0, 1'b0, MGM_EN0, MGM_D0 );

	UDP_op_cond_typ_my_model_MGM_IQN_LATCH_UDP( IQN1, 1'b0, 1'b0, MGM_EN0, MGM_D0 );

	not MGM_BG_2( CGOBS, IQ1 );

	wire GCLK_row1;

	and MGM_BG_3( GCLK_row1, CLK, IQN1 );

	wire GCLK_row2;

	and MGM_BG_4( GCLK_row2, CLK, SE );

	or MGM_BG_5( GCLK, GCLK_row1, GCLK_row2 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module MU2IX1_func( QN, S, IN0, IN1 );
input IN0, IN1, S;
output QN;

	wire IN0_inv_for_MU2IX1;

	not MGM_BG_0( IN0_inv_for_MU2IX1, IN0 );

	wire IN1_inv_for_MU2IX1;

	not MGM_BG_1( IN1_inv_for_MU2IX1, IN1 );

	wire QN_row1;

	and MGM_BG_2( QN_row1, IN0_inv_for_MU2IX1, IN1_inv_for_MU2IX1 );

	wire S_inv_for_MU2IX1;

	not MGM_BG_3( S_inv_for_MU2IX1, S );

	wire QN_row2;

	and MGM_BG_4( QN_row2, IN0_inv_for_MU2IX1, S_inv_for_MU2IX1 );

	wire QN_row3;

	and MGM_BG_5( QN_row3, IN1_inv_for_MU2IX1, S );

	or MGM_BG_6( QN, QN_row1, QN_row2, QN_row3 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module MU2X1_func( Q, IN0, IN1, S );
input IN0, IN1, S;
output Q;

	wire Q_row1;

	and MGM_BG_0( Q_row1, IN0, IN1 );

	wire S_inv_for_MU2X1;

	not MGM_BG_1( S_inv_for_MU2X1, S );

	wire Q_row2;

	and MGM_BG_2( Q_row2, S_inv_for_MU2X1, IN0 );

	wire Q_row3;

	and MGM_BG_3( Q_row3, IN1, S );

	or MGM_BG_4( Q, Q_row1, Q_row2, Q_row3 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module MU4IX1_func( NQ, IN1, IN0, S0, IN3, IN2, S1 );
input IN0, IN1, IN2, IN3, S0, S1;
output NQ;

	wire IN0_inv_for_MU4IX1;

	not MGM_BG_0( IN0_inv_for_MU4IX1, IN0 );

	wire S0_inv_for_MU4IX1;

	not MGM_BG_1( S0_inv_for_MU4IX1, S0 );

	wire S1_inv_for_MU4IX1;

	not MGM_BG_2( S1_inv_for_MU4IX1, S1 );

	wire NQ_row1;

	and MGM_BG_3( NQ_row1, IN0_inv_for_MU4IX1, S0_inv_for_MU4IX1, S1_inv_for_MU4IX1 );

	wire IN1_inv_for_MU4IX1;

	not MGM_BG_4( IN1_inv_for_MU4IX1, IN1 );

	wire NQ_row2;

	and MGM_BG_5( NQ_row2, IN1_inv_for_MU4IX1, S1_inv_for_MU4IX1, S0 );

	wire IN2_inv_for_MU4IX1;

	not MGM_BG_6( IN2_inv_for_MU4IX1, IN2 );

	wire NQ_row3;

	and MGM_BG_7( NQ_row3, IN2_inv_for_MU4IX1, S0_inv_for_MU4IX1, S1 );

	wire IN3_inv_for_MU4IX1;

	not MGM_BG_8( IN3_inv_for_MU4IX1, IN3 );

	wire NQ_row4;

	and MGM_BG_9( NQ_row4, IN3_inv_for_MU4IX1, S0, S1 );

	or MGM_BG_10( NQ, NQ_row1, NQ_row2, NQ_row3, NQ_row4 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module MU4X1_func( Q, IN1, IN0, S0, IN3, IN2, S1 );
input IN0, IN1, IN2, IN3, S0, S1;
output Q;

	wire S0_inv_for_MU4X1;

	not MGM_BG_0( S0_inv_for_MU4X1, S0 );

	wire S1_inv_for_MU4X1;

	not MGM_BG_1( S1_inv_for_MU4X1, S1 );

	wire Q_row1;

	and MGM_BG_2( Q_row1, S0_inv_for_MU4X1, S1_inv_for_MU4X1, IN0 );

	wire Q_row2;

	and MGM_BG_3( Q_row2, S1_inv_for_MU4X1, IN1, S0 );

	wire Q_row3;

	and MGM_BG_4( Q_row3, S0_inv_for_MU4X1, IN2, S1 );

	wire Q_row4;

	and MGM_BG_5( Q_row4, IN3, S0, S1 );

	or MGM_BG_6( Q, Q_row1, Q_row2, Q_row3, Q_row4 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module NA2I1X1_func( OUT, B, A );
input A, B;
output OUT;

	wire B_inv_for_NA2I1X1;

	not MGM_BG_0( B_inv_for_NA2I1X1, B );

	or MGM_BG_1( OUT, A, B_inv_for_NA2I1X1 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module NA2X1_func( OUT, A, B );
input A, B;
output OUT;

	wire A_inv_for_NA2X1;

	not MGM_BG_0( A_inv_for_NA2X1, A );

	wire B_inv_for_NA2X1;

	not MGM_BG_1( B_inv_for_NA2X1, B );

	or MGM_BG_2( OUT, A_inv_for_NA2X1, B_inv_for_NA2X1 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module NA3I1X1_func( OUT, NA, C, B );
input B, C, NA;
output OUT;

	wire B_inv_for_NA3I1X1;

	not MGM_BG_0( B_inv_for_NA3I1X1, B );

	wire C_inv_for_NA3I1X1;

	not MGM_BG_1( C_inv_for_NA3I1X1, C );

	or MGM_BG_2( OUT, B_inv_for_NA3I1X1, C_inv_for_NA3I1X1, NA );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module NA3I2X1_func( OUT, A, C, B );
input A, B, C;
output OUT;

	wire C_inv_for_NA3I2X1;

	not MGM_BG_0( C_inv_for_NA3I2X1, C );

	or MGM_BG_1( OUT, A, B, C_inv_for_NA3I2X1 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module NA3X1_func( OUT, A, B, C );
input A, B, C;
output OUT;

	wire A_inv_for_NA3X1;

	not MGM_BG_0( A_inv_for_NA3X1, A );

	wire B_inv_for_NA3X1;

	not MGM_BG_1( B_inv_for_NA3X1, B );

	wire C_inv_for_NA3X1;

	not MGM_BG_2( C_inv_for_NA3X1, C );

	or MGM_BG_3( OUT, A_inv_for_NA3X1, B_inv_for_NA3X1, C_inv_for_NA3X1 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module NA4I1X1_func( OUT, A, B, C, D );
input A, B, C, D;
output OUT;

	wire B_inv_for_NA4I1X1;

	not MGM_BG_0( B_inv_for_NA4I1X1, B );

	wire C_inv_for_NA4I1X1;

	not MGM_BG_1( C_inv_for_NA4I1X1, C );

	wire D_inv_for_NA4I1X1;

	not MGM_BG_2( D_inv_for_NA4I1X1, D );

	or MGM_BG_3( OUT, A, B_inv_for_NA4I1X1, C_inv_for_NA4I1X1, D_inv_for_NA4I1X1 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module NA4I2X1_func( OUT, A, B, C, D );
input A, B, C, D;
output OUT;

	wire C_inv_for_NA4I2X1;

	not MGM_BG_0( C_inv_for_NA4I2X1, C );

	wire D_inv_for_NA4I2X1;

	not MGM_BG_1( D_inv_for_NA4I2X1, D );

	or MGM_BG_2( OUT, A, B, C_inv_for_NA4I2X1, D_inv_for_NA4I2X1 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module NA4I3X1_func( OUT, A, B, D, C );
input A, B, C, D;
output OUT;

	wire D_inv_for_NA4I3X1;

	not MGM_BG_0( D_inv_for_NA4I3X1, D );

	or MGM_BG_1( OUT, A, B, C, D_inv_for_NA4I3X1 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module NA4X1_func( OUT, B, A, C, D );
input A, B, C, D;
output OUT;

	wire A_inv_for_NA4X1;

	not MGM_BG_0( A_inv_for_NA4X1, A );

	wire B_inv_for_NA4X1;

	not MGM_BG_1( B_inv_for_NA4X1, B );

	wire C_inv_for_NA4X1;

	not MGM_BG_2( C_inv_for_NA4X1, C );

	wire D_inv_for_NA4X1;

	not MGM_BG_3( D_inv_for_NA4X1, D );

	or MGM_BG_4( OUT, A_inv_for_NA4X1, B_inv_for_NA4X1, C_inv_for_NA4X1, D_inv_for_NA4X1 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module NA5I1X1_func( OUT, A, B, E, C, D );
input A, B, C, D, E;
output OUT;

	wire B_inv_for_NA5I1X1;

	not MGM_BG_0( B_inv_for_NA5I1X1, B );

	wire C_inv_for_NA5I1X1;

	not MGM_BG_1( C_inv_for_NA5I1X1, C );

	wire D_inv_for_NA5I1X1;

	not MGM_BG_2( D_inv_for_NA5I1X1, D );

	wire E_inv_for_NA5I1X1;

	not MGM_BG_3( E_inv_for_NA5I1X1, E );

	or MGM_BG_4( OUT, A, B_inv_for_NA5I1X1, C_inv_for_NA5I1X1, D_inv_for_NA5I1X1, E_inv_for_NA5I1X1 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module NA5X1_func( OUT, A, B, E, C, D );
input A, B, C, D, E;
output OUT;

	wire A_inv_for_NA5X1;

	not MGM_BG_0( A_inv_for_NA5X1, A );

	wire B_inv_for_NA5X1;

	not MGM_BG_1( B_inv_for_NA5X1, B );

	wire C_inv_for_NA5X1;

	not MGM_BG_2( C_inv_for_NA5X1, C );

	wire D_inv_for_NA5X1;

	not MGM_BG_3( D_inv_for_NA5X1, D );

	wire E_inv_for_NA5X1;

	not MGM_BG_4( E_inv_for_NA5X1, E );

	or MGM_BG_5( OUT, A_inv_for_NA5X1, B_inv_for_NA5X1, C_inv_for_NA5X1, D_inv_for_NA5X1, E_inv_for_NA5X1 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module NA6X1_func( OUT, B, A, E, D, F, C );
input A, B, C, D, E, F;
output OUT;

	wire A_inv_for_NA6X1;

	not MGM_BG_0( A_inv_for_NA6X1, A );

	wire B_inv_for_NA6X1;

	not MGM_BG_1( B_inv_for_NA6X1, B );

	wire C_inv_for_NA6X1;

	not MGM_BG_2( C_inv_for_NA6X1, C );

	wire D_inv_for_NA6X1;

	not MGM_BG_3( D_inv_for_NA6X1, D );

	wire E_inv_for_NA6X1;

	not MGM_BG_4( E_inv_for_NA6X1, E );

	wire F_inv_for_NA6X1;

	not MGM_BG_5( F_inv_for_NA6X1, F );

	or MGM_BG_6( OUT, A_inv_for_NA6X1, B_inv_for_NA6X1, C_inv_for_NA6X1, D_inv_for_NA6X1, E_inv_for_NA6X1, F_inv_for_NA6X1 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module NO2X1_func( OUT, A, B );
input A, B;
output OUT;

	wire A_inv_for_NO2X1;

	not MGM_BG_0( A_inv_for_NO2X1, A );

	wire B_inv_for_NO2X1;

	not MGM_BG_1( B_inv_for_NO2X1, B );

	and MGM_BG_2( OUT, A_inv_for_NO2X1, B_inv_for_NO2X1 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module NO3X1_func( OUT, A, B, C );
input A, B, C;
output OUT;

	wire A_inv_for_NO3X1;

	not MGM_BG_0( A_inv_for_NO3X1, A );

	wire B_inv_for_NO3X1;

	not MGM_BG_1( B_inv_for_NO3X1, B );

	wire C_inv_for_NO3X1;

	not MGM_BG_2( C_inv_for_NO3X1, C );

	and MGM_BG_3( OUT, A_inv_for_NO3X1, B_inv_for_NO3X1, C_inv_for_NO3X1 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module NO4X1_func( OUT, B, A, C, D );
input A, B, C, D;
output OUT;

	wire A_inv_for_NO4X1;

	not MGM_BG_0( A_inv_for_NO4X1, A );

	wire B_inv_for_NO4X1;

	not MGM_BG_1( B_inv_for_NO4X1, B );

	wire C_inv_for_NO4X1;

	not MGM_BG_2( C_inv_for_NO4X1, C );

	wire D_inv_for_NO4X1;

	not MGM_BG_3( D_inv_for_NO4X1, D );

	and MGM_BG_4( OUT, A_inv_for_NO4X1, B_inv_for_NO4X1, C_inv_for_NO4X1, D_inv_for_NO4X1 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module NO5X1_func( OUT, E, B, A, C, D );
input A, B, C, D, E;
output OUT;

	wire A_inv_for_NO5X1;

	not MGM_BG_0( A_inv_for_NO5X1, A );

	wire B_inv_for_NO5X1;

	not MGM_BG_1( B_inv_for_NO5X1, B );

	wire C_inv_for_NO5X1;

	not MGM_BG_2( C_inv_for_NO5X1, C );

	wire D_inv_for_NO5X1;

	not MGM_BG_3( D_inv_for_NO5X1, D );

	wire E_inv_for_NO5X1;

	not MGM_BG_4( E_inv_for_NO5X1, E );

	and MGM_BG_5( OUT, A_inv_for_NO5X1, B_inv_for_NO5X1, C_inv_for_NO5X1, D_inv_for_NO5X1, E_inv_for_NO5X1 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module NO6X1_func( OUT, F, D, C, A, E, B );
input A, B, C, D, E, F;
output OUT;

	wire A_inv_for_NO6X1;

	not MGM_BG_0( A_inv_for_NO6X1, A );

	wire B_inv_for_NO6X1;

	not MGM_BG_1( B_inv_for_NO6X1, B );

	wire C_inv_for_NO6X1;

	not MGM_BG_2( C_inv_for_NO6X1, C );

	wire D_inv_for_NO6X1;

	not MGM_BG_3( D_inv_for_NO6X1, D );

	wire E_inv_for_NO6X1;

	not MGM_BG_4( E_inv_for_NO6X1, E );

	wire F_inv_for_NO6X1;

	not MGM_BG_5( F_inv_for_NO6X1, F );

	and MGM_BG_6( OUT, A_inv_for_NO6X1, B_inv_for_NO6X1, C_inv_for_NO6X1, D_inv_for_NO6X1, E_inv_for_NO6X1, F_inv_for_NO6X1 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module OA211X1_func( OUT, B, A, D, C );
input A, B, C, D;
output OUT;

	wire OUT_row1;

	and MGM_BG_0( OUT_row1, A, C, D );

	wire OUT_row2;

	and MGM_BG_1( OUT_row2, B, C, D );

	or MGM_BG_2( OUT, OUT_row1, OUT_row2 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module ON32X1_func( OUT, A, B, C, D, E );
input A, B, C, D, E;
output OUT;

	wire A_inv_for_ON32X1;

	not MGM_BG_0( A_inv_for_ON32X1, A );

	wire B_inv_for_ON32X1;

	not MGM_BG_1( B_inv_for_ON32X1, B );

	wire C_inv_for_ON32X1;

	not MGM_BG_2( C_inv_for_ON32X1, C );

	wire OUT_row1;

	and MGM_BG_3( OUT_row1, A_inv_for_ON32X1, B_inv_for_ON32X1, C_inv_for_ON32X1 );

	wire D_inv_for_ON32X1;

	not MGM_BG_4( D_inv_for_ON32X1, D );

	wire E_inv_for_ON32X1;

	not MGM_BG_5( E_inv_for_ON32X1, E );

	wire OUT_row2;

	and MGM_BG_6( OUT_row2, D_inv_for_ON32X1, E_inv_for_ON32X1 );

	or MGM_BG_7( OUT, OUT_row1, OUT_row2 );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module OR2X1_func( OUT, A, B );
input A, B;
output OUT;

	or MGM_BG_0( OUT, A, B );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module OR3X1_func( OUT, A, B, C );
input A, B, C;
output OUT;

	or MGM_BG_0( OUT, A, B, C );

endmodule
`endcelldefine
// udp_data_end
// udp_data_begin


`celldefine
module SDFRX1_func( Q, QN, ICLK, SD, SE, D );
input D, ICLK, SD, SE;
output Q, QN;

	wire D_inv_for_SDFRX1;

	not MGM_BG_0( D_inv_for_SDFRX1, D );

	wire SD_inv_for_SDFRX1;

	not MGM_BG_1( SD_inv_for_SDFRX1, SD );

	wire MGM_D0_row1;

	and MGM_BG_2( MGM_D0_row1, D_inv_for_SDFRX1, SD_inv_for_SDFRX1 );

	wire SE_inv_for_SDFRX1;

	not MGM_BG_3( SE_inv_for_SDFRX1, SE );

	wire MGM_D0_row2;

	and MGM_BG_4( MGM_D0_row2, D_inv_for_SDFRX1, SE_inv_for_SDFRX1 );

	wire MGM_D0_row3;

	and MGM_BG_5( MGM_D0_row3, SD_inv_for_SDFRX1, SE );

	or MGM_BG_6( MGM_D0, MGM_D0_row1, MGM_D0_row2, MGM_D0_row3 );

	UDP_op_cond_typ_my_model_MGM_IQ_FF_UDP( IQ1, 1'b0, 1'b0, ICLK, MGM_D0 );

	UDP_op_cond_typ_my_model_MGM_IQN_FF_UDP( IQN1, 1'b0, 1'b0, ICLK, MGM_D0 );

	not MGM_BG_7( Q, IQ1 );

	not MGM_BG_8( QN, IQN1 );

endmodule
`endcelldefine
// udp_data_end
